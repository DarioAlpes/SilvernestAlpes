buildscript {
    ext.kotlin_version = '1.3.11'
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'de.dynamicfiles.projects.gradle.plugins:javafx-gradle-plugin:8.8.2'

    }
}

apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'idea'
apply plugin: 'javafx-gradle-plugin'

group 'co.smartobjects.ui'
version '0.1.0'
def artefacto = 'javafx'
description = "Modelos de UI de prompter"

sourceCompatibility = 1.8
targetCompatibility = 1.8

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

compileJava {
    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'
}

compileTestJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    options.compilerArgs += '-parameters'
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

repositories {
    jcenter()
    mavenCentral()
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    def versionCorutinas = '1.0.0'
    compile "org.jetbrains.kotlinx:kotlinx-coroutines-core:$versionCorutinas"
    compile "org.jetbrains.kotlinx:kotlinx-coroutines-javafx:$versionCorutinas"

    compile 'io.reactivex.rxjava2:rxjavafx:2.2.2'

    compile 'com.jfoenix:jfoenix:8.0.3'

    def version_datafx = '8.0.1'
    compile "io.datafx:datafx:$version_datafx"
    compile "io.datafx:flow:$version_datafx"

    compile 'de.jensd:fontawesomefx-commons:8.15'
    compile 'de.jensd:fontawesomefx-fontawesome:4.7.0-5'

    compile 'it.sauronsoftware:junique:1.0.4'

    compile project(':nfc-windows-pcsc')
    compile project(':modelos-ui')
    compile project(':configuracion-persistencia-sqlite')

    // Para lector de barras
    compile 'com.github.purejavacomm:purejavacomm:1.0.2.RELEASE'
    compile 'com.fazecast:jSerialComm:2.2.0'

    compile 'org.tinylog:tinylog:1.3.1'
    compile 'com.microsoft.azure:adal4j:1.6.3'

    def junit5_jupiter = '5.3.1'
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junit5_jupiter"
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junit5_jupiter"
    testImplementation "org.junit.jupiter:junit-jupiter-params:$junit5_jupiter"

    testImplementation 'org.junit.platform:junit-platform-launcher:1.3.1'

    testImplementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
    testImplementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

    testImplementation 'org.mockito:mockito-inline:2.19.0'
}

test {
    useJUnitPlatform()

    filter {
        includeTestsMatching('*Pruebas')
    }

    // Always run tests, even when nothing changed.
    dependsOn 'cleanTest'

    // Show test results.
    testLogging {
        events "passed", "skipped", "failed"
    }

    reports {
        junitXml.enabled = false
        html.enabled = false
    }
}

jfx {
    copyAdditionalAppResourcesToJar = true
    mainClass = "${group}.${artefacto}.AplicacionPrincipal"
    vendor = "SmartObjects"
    appName = "Silvernest" // El ícono de la aplicación se debe llamar igual (i.e. "/deploy/package/windows/$appName.ico")
    skipNativeVersionNumberSanitizing = true
    nativeReleaseVersion = version.replace('.', '_')

    needShortcut = true
    needMenu = true

    bundleArguments = [
            systemWide: true
    ]
}