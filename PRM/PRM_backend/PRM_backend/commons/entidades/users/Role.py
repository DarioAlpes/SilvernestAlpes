from commons.entidades.users.RolesByLocation import RolesByLocation
from commons.excepciones.apiexceptions import ValidationError

GLOBAL_ADMIN = u"global-admin"
CLIENT_ADMIN = u"admin"
QUERY_USER = u"query"
SALES_USER = u"sales"
CASHIER_USER = u"cashier"
WAITER_USER = u"waiter"
ACCESS_USER = u"access"
PROMOTER_USER = u"promoter"
CASHIER_WAITER_USER = u"cashier-waiter"

VALID_CLIENT_ROLES = [CLIENT_ADMIN, QUERY_USER, SALES_USER, CASHIER_USER, WAITER_USER, ACCESS_USER, PROMOTER_USER,
                      CASHIER_WAITER_USER]
VALID_ROLES = [GLOBAL_ADMIN] + VALID_CLIENT_ROLES

READ_ACTION = u"read"
CREATE_ACTION = u"create"
UPDATE_ACTION = u"update"
DELETE_ACTION = u"delete"

QUERY_USER_FORBIDDEN_VIEWS = None

SALES_ALLOWED_ACTIONS = {READ_ACTION: set(),
                         CREATE_ACTION: set(),
                         UPDATE_ACTION: set(),
                         DELETE_ACTION: set()}

CASHIER_ALLOWED_ACTIONS = {READ_ACTION: set(),
                           CREATE_ACTION: set(),
                           UPDATE_ACTION: set(),
                           DELETE_ACTION: set()}

WAITER_ALLOWED_ACTIONS = {READ_ACTION: set(),
                          CREATE_ACTION: set(),
                          UPDATE_ACTION: set(),
                          DELETE_ACTION: set()}

ACCESS_ALLOWED_ACTIONS = {READ_ACTION: set(),
                          CREATE_ACTION: set(),
                          UPDATE_ACTION: set(),
                          DELETE_ACTION: set()}

PROMOTER_ALLOWED_ACTIONS = {READ_ACTION: set(),
                            CREATE_ACTION: set(),
                            UPDATE_ACTION: set(),
                            DELETE_ACTION: set()}

CASHIER_WAITER_ALLOWED_ACTIONS = {READ_ACTION: set(),
                                  CREATE_ACTION: set(),
                                  UPDATE_ACTION: set(),
                                  DELETE_ACTION: set()}

WHITELIST_ROLES = {SALES_USER: SALES_ALLOWED_ACTIONS,
                   CASHIER_USER: CASHIER_ALLOWED_ACTIONS,
                   WAITER_USER: WAITER_ALLOWED_ACTIONS,
                   ACCESS_USER: ACCESS_ALLOWED_ACTIONS,
                   PROMOTER_USER: PROMOTER_ALLOWED_ACTIONS,
                   CASHIER_WAITER_USER: CASHIER_WAITER_ALLOWED_ACTIONS}


def init_global_variables():
    global QUERY_USER_FORBIDDEN_VIEWS
    if QUERY_USER_FORBIDDEN_VIEWS is None:
        from commons.services.users.usuarioView import USERS_VIEW_NAME
        from commons.services.clienteView import CLIENTS_VIEW_NAME
        from commons.services.clienteView import CLIENT_KEYS_VIEW_NAME
        from CJM.services.reservas.eventoSocialView import SOCIAL_EVENT_VIEW_NAME
        from CJM.services.paquetes.paqueteView import PACKAGES_VIEW_NAME
        from CJM.services.paquetes.accesoPaqueteView import PACKAGE_ACCESSES_VIEW_NAME
        from CJM.services.paquetes.consumoCantidadPaqueteView import PACKAGE_AMOUNT_CONSUMPTIONS_VIEW_NAME
        from CJM.services.paquetes.consumoDineroPaqueteView import PACKAGE_MONEY_CONSUMPTIONS_VIEW_NAME
        from CJM.services.paquetes.packagePriceRuleView import PACKAGE_PRICE_RULES_VIEW_NAME
        from CJM.services.reservas.reservaView import RESERVATIONS_VIEW_NAME
        from CJM.services.reservas.reservaPersonaView import PERSON_RESERVATIONS_VIEW_NAME
        from CJM.services.reservas.reservaPersonaView import PERSON_RESERVATIONS_ACTIVATIONS_VIEW_NAME
        from CJM.services.reservas.reservaPersonaView import PERSON_RESERVATIONS_KEYS_VIEW_NAME
        from CJM.services.reservas.moneyTopoffsView import MONEY_TOPOFFS_VIEW_NAME
        from CJM.services.reservas.amountTopoffsView import AMOUNT_TOPOFFS_VIEW_NAME
        from CJM.services.reservas.accessTopoffsView import ACCESS_TOPOFFS_VIEW_NAME
        from CJM.services.reservas.reservaPersonaView import AVAILABLE_FUNDS_VIEW_NAME
        from CJM.services.reservas.reservaPersonaView import PERSON_RESERVATION_BALANCE_VIEW_NAME
        from CJM.services.reservas.orders.personAccessView import PERSON_ACCESSES_VIEW_NAME
        from CJM.services.reservas.reservaView import RESERVATION_BALANCE_VIEW_NAME
        from CJM.services.reservas.orders.orderView import ORDERS_VIEW_NAME
        from CJM.services.reservas.orders.amountConsumptionView import PERSON_AMOUNT_CONSUMPTIONS_VIEW_NAME
        from CJM.services.reservas.orders.moneyConsumptionView import PERSON_MONEY_CONSUMPTIONS_VIEW_NAME
        from CJM.services.currencyView import CURRENCIES_VIEW_NAME
        from commons.services.locations.ubicacionView import LOCATIONS_VIEW_NAME
        from CJM.services.persons.personaView import PERSONS_VIEW_NAME
        from CJM.services.persons.personsRelationshipsView import PERSONS_RELATIONSHIPS_VIEW_NAME
        from CJM.services.skus.categoriaSKUView import SKU_CATEGORIES_VIEW_NAME
        from CJM.services.skus.ubicacionVentaSKUView import SKUS_SALES_VIEW_NAME
        from CJM.services.skus.skuView import SKUS_VIEW_NAME
        from CJM.services.sensores.clientSensorsView import CLIENT_SENSORS_VIEW_NAME
        from CJM.services.reports.transactionsPerUserView import TRANSACTIONS_PER_USER_VIEW_NAME
        from CJM.services.reports.entititesByKindPerUserView import ENTITIES_BY_KIND_PER_USER_VIEW_NAME

        QUERY_USER_FORBIDDEN_VIEWS = {USERS_VIEW_NAME, CLIENTS_VIEW_NAME, PERSON_RESERVATIONS_KEYS_VIEW_NAME,
                                      CLIENT_KEYS_VIEW_NAME, TRANSACTIONS_PER_USER_VIEW_NAME,
                                      ENTITIES_BY_KIND_PER_USER_VIEW_NAME, PERSON_RESERVATIONS_ACTIVATIONS_VIEW_NAME}

        SALES_ALLOWED_ACTIONS[READ_ACTION].add(SOCIAL_EVENT_VIEW_NAME)
        SALES_ALLOWED_ACTIONS[READ_ACTION].add(PACKAGES_VIEW_NAME)
        SALES_ALLOWED_ACTIONS[READ_ACTION].add(PACKAGE_ACCESSES_VIEW_NAME)
        SALES_ALLOWED_ACTIONS[READ_ACTION].add(PACKAGE_AMOUNT_CONSUMPTIONS_VIEW_NAME)
        SALES_ALLOWED_ACTIONS[READ_ACTION].add(PACKAGE_MONEY_CONSUMPTIONS_VIEW_NAME)
        SALES_ALLOWED_ACTIONS[READ_ACTION].add(PACKAGE_PRICE_RULES_VIEW_NAME)
        SALES_ALLOWED_ACTIONS[READ_ACTION].add(AVAILABLE_FUNDS_VIEW_NAME)
        SALES_ALLOWED_ACTIONS[READ_ACTION].add(PERSON_RESERVATION_BALANCE_VIEW_NAME)
        SALES_ALLOWED_ACTIONS[READ_ACTION].add(RESERVATION_BALANCE_VIEW_NAME)
        SALES_ALLOWED_ACTIONS[READ_ACTION].add(ORDERS_VIEW_NAME)
        SALES_ALLOWED_ACTIONS[READ_ACTION].add(PERSON_AMOUNT_CONSUMPTIONS_VIEW_NAME)
        SALES_ALLOWED_ACTIONS[READ_ACTION].add(PERSON_MONEY_CONSUMPTIONS_VIEW_NAME)
        SALES_ALLOWED_ACTIONS[READ_ACTION].add(PERSON_ACCESSES_VIEW_NAME)
        SALES_ALLOWED_ACTIONS[READ_ACTION].add(RESERVATIONS_VIEW_NAME)
        SALES_ALLOWED_ACTIONS[CREATE_ACTION].add(RESERVATIONS_VIEW_NAME)
        SALES_ALLOWED_ACTIONS[UPDATE_ACTION].add(RESERVATIONS_VIEW_NAME)
        SALES_ALLOWED_ACTIONS[READ_ACTION].add(PERSON_RESERVATIONS_VIEW_NAME)
        SALES_ALLOWED_ACTIONS[CREATE_ACTION].add(PERSON_RESERVATIONS_VIEW_NAME)
        SALES_ALLOWED_ACTIONS[UPDATE_ACTION].add(PERSON_RESERVATIONS_VIEW_NAME)
        SALES_ALLOWED_ACTIONS[DELETE_ACTION].add(PERSON_RESERVATIONS_VIEW_NAME)
        SALES_ALLOWED_ACTIONS[READ_ACTION].add(MONEY_TOPOFFS_VIEW_NAME)
        SALES_ALLOWED_ACTIONS[CREATE_ACTION].add(MONEY_TOPOFFS_VIEW_NAME)
        SALES_ALLOWED_ACTIONS[UPDATE_ACTION].add(MONEY_TOPOFFS_VIEW_NAME)
        SALES_ALLOWED_ACTIONS[READ_ACTION].add(AMOUNT_TOPOFFS_VIEW_NAME)
        SALES_ALLOWED_ACTIONS[CREATE_ACTION].add(AMOUNT_TOPOFFS_VIEW_NAME)
        SALES_ALLOWED_ACTIONS[UPDATE_ACTION].add(AMOUNT_TOPOFFS_VIEW_NAME)
        SALES_ALLOWED_ACTIONS[READ_ACTION].add(ACCESS_TOPOFFS_VIEW_NAME)
        SALES_ALLOWED_ACTIONS[CREATE_ACTION].add(ACCESS_TOPOFFS_VIEW_NAME)
        SALES_ALLOWED_ACTIONS[UPDATE_ACTION].add(ACCESS_TOPOFFS_VIEW_NAME)

        CASHIER_ALLOWED_ACTIONS[UPDATE_ACTION].add(CLIENT_SENSORS_VIEW_NAME)
        CASHIER_ALLOWED_ACTIONS[UPDATE_ACTION].add(PERSONS_VIEW_NAME)
        CASHIER_ALLOWED_ACTIONS[READ_ACTION].add(PERSONS_VIEW_NAME)
        CASHIER_ALLOWED_ACTIONS[CREATE_ACTION].add(PERSONS_VIEW_NAME)
        CASHIER_ALLOWED_ACTIONS[UPDATE_ACTION].add(PERSONS_RELATIONSHIPS_VIEW_NAME)
        CASHIER_ALLOWED_ACTIONS[READ_ACTION].add(PERSONS_RELATIONSHIPS_VIEW_NAME)
        CASHIER_ALLOWED_ACTIONS[CREATE_ACTION].add(PERSONS_RELATIONSHIPS_VIEW_NAME)
        CASHIER_ALLOWED_ACTIONS[UPDATE_ACTION].add(RESERVATIONS_VIEW_NAME)
        CASHIER_ALLOWED_ACTIONS[READ_ACTION].add(RESERVATIONS_VIEW_NAME)
        CASHIER_ALLOWED_ACTIONS[CREATE_ACTION].add(RESERVATIONS_VIEW_NAME)
        CASHIER_ALLOWED_ACTIONS[UPDATE_ACTION].add(PERSON_RESERVATIONS_VIEW_NAME)
        CASHIER_ALLOWED_ACTIONS[READ_ACTION].add(PERSON_RESERVATIONS_VIEW_NAME)
        CASHIER_ALLOWED_ACTIONS[CREATE_ACTION].add(PERSON_RESERVATIONS_VIEW_NAME)
        CASHIER_ALLOWED_ACTIONS[DELETE_ACTION].add(PERSON_RESERVATIONS_VIEW_NAME)
        CASHIER_ALLOWED_ACTIONS[READ_ACTION].add(PERSON_RESERVATION_BALANCE_VIEW_NAME)
        CASHIER_ALLOWED_ACTIONS[READ_ACTION].add(RESERVATION_BALANCE_VIEW_NAME)
        CASHIER_ALLOWED_ACTIONS[READ_ACTION].add(AVAILABLE_FUNDS_VIEW_NAME)
        CASHIER_ALLOWED_ACTIONS[READ_ACTION].add(SKU_CATEGORIES_VIEW_NAME)
        CASHIER_ALLOWED_ACTIONS[READ_ACTION].add(SKUS_VIEW_NAME)
        CASHIER_ALLOWED_ACTIONS[READ_ACTION].add(PACKAGES_VIEW_NAME)
        CASHIER_ALLOWED_ACTIONS[READ_ACTION].add(PACKAGE_ACCESSES_VIEW_NAME)
        CASHIER_ALLOWED_ACTIONS[READ_ACTION].add(PACKAGE_PRICE_RULES_VIEW_NAME)
        CASHIER_ALLOWED_ACTIONS[READ_ACTION].add(PACKAGE_AMOUNT_CONSUMPTIONS_VIEW_NAME)
        CASHIER_ALLOWED_ACTIONS[READ_ACTION].add(PACKAGE_MONEY_CONSUMPTIONS_VIEW_NAME)
        CASHIER_ALLOWED_ACTIONS[CREATE_ACTION].add(MONEY_TOPOFFS_VIEW_NAME)
        CASHIER_ALLOWED_ACTIONS[READ_ACTION].add(CURRENCIES_VIEW_NAME)
        CASHIER_ALLOWED_ACTIONS[READ_ACTION].add(LOCATIONS_VIEW_NAME)
        CASHIER_ALLOWED_ACTIONS[READ_ACTION].add(ACCESS_TOPOFFS_VIEW_NAME)
        CASHIER_ALLOWED_ACTIONS[READ_ACTION].add(AMOUNT_TOPOFFS_VIEW_NAME)
        CASHIER_ALLOWED_ACTIONS[READ_ACTION].add(MONEY_TOPOFFS_VIEW_NAME)
        CASHIER_ALLOWED_ACTIONS[READ_ACTION].add(PERSON_ACCESSES_VIEW_NAME)
        CASHIER_ALLOWED_ACTIONS[READ_ACTION].add(ORDERS_VIEW_NAME)
        CASHIER_ALLOWED_ACTIONS[READ_ACTION].add(PERSON_AMOUNT_CONSUMPTIONS_VIEW_NAME)
        CASHIER_ALLOWED_ACTIONS[READ_ACTION].add(PERSON_MONEY_CONSUMPTIONS_VIEW_NAME)

        WAITER_ALLOWED_ACTIONS[UPDATE_ACTION].add(CLIENT_SENSORS_VIEW_NAME)
        WAITER_ALLOWED_ACTIONS[READ_ACTION].add(PERSONS_VIEW_NAME)
        WAITER_ALLOWED_ACTIONS[READ_ACTION].add(RESERVATIONS_VIEW_NAME)
        WAITER_ALLOWED_ACTIONS[READ_ACTION].add(PERSON_RESERVATIONS_VIEW_NAME)
        WAITER_ALLOWED_ACTIONS[READ_ACTION].add(SKU_CATEGORIES_VIEW_NAME)
        WAITER_ALLOWED_ACTIONS[READ_ACTION].add(SKUS_VIEW_NAME)
        WAITER_ALLOWED_ACTIONS[READ_ACTION].add(SKUS_SALES_VIEW_NAME)
        WAITER_ALLOWED_ACTIONS[READ_ACTION].add(PACKAGES_VIEW_NAME)
        WAITER_ALLOWED_ACTIONS[CREATE_ACTION].add(ORDERS_VIEW_NAME)
        WAITER_ALLOWED_ACTIONS[READ_ACTION].add(CURRENCIES_VIEW_NAME)
        WAITER_ALLOWED_ACTIONS[READ_ACTION].add(LOCATIONS_VIEW_NAME)
        WAITER_ALLOWED_ACTIONS[READ_ACTION].add(ACCESS_TOPOFFS_VIEW_NAME)
        WAITER_ALLOWED_ACTIONS[READ_ACTION].add(AMOUNT_TOPOFFS_VIEW_NAME)
        WAITER_ALLOWED_ACTIONS[READ_ACTION].add(MONEY_TOPOFFS_VIEW_NAME)
        WAITER_ALLOWED_ACTIONS[READ_ACTION].add(PERSON_ACCESSES_VIEW_NAME)
        WAITER_ALLOWED_ACTIONS[READ_ACTION].add(ORDERS_VIEW_NAME)
        WAITER_ALLOWED_ACTIONS[READ_ACTION].add(PERSON_AMOUNT_CONSUMPTIONS_VIEW_NAME)
        WAITER_ALLOWED_ACTIONS[READ_ACTION].add(PERSON_MONEY_CONSUMPTIONS_VIEW_NAME)

        ACCESS_ALLOWED_ACTIONS[UPDATE_ACTION].add(CLIENT_SENSORS_VIEW_NAME)
        ACCESS_ALLOWED_ACTIONS[READ_ACTION].add(PERSONS_VIEW_NAME)
        ACCESS_ALLOWED_ACTIONS[READ_ACTION].add(RESERVATIONS_VIEW_NAME)
        ACCESS_ALLOWED_ACTIONS[READ_ACTION].add(PERSON_RESERVATIONS_VIEW_NAME)
        ACCESS_ALLOWED_ACTIONS[READ_ACTION].add(SKU_CATEGORIES_VIEW_NAME)
        ACCESS_ALLOWED_ACTIONS[READ_ACTION].add(SKUS_VIEW_NAME)
        ACCESS_ALLOWED_ACTIONS[READ_ACTION].add(PACKAGES_VIEW_NAME)
        ACCESS_ALLOWED_ACTIONS[CREATE_ACTION].add(PERSON_ACCESSES_VIEW_NAME)
        ACCESS_ALLOWED_ACTIONS[READ_ACTION].add(CURRENCIES_VIEW_NAME)
        ACCESS_ALLOWED_ACTIONS[READ_ACTION].add(LOCATIONS_VIEW_NAME)

        PROMOTER_ALLOWED_ACTIONS[UPDATE_ACTION].add(PERSONS_VIEW_NAME)
        PROMOTER_ALLOWED_ACTIONS[READ_ACTION].add(PERSONS_VIEW_NAME)
        PROMOTER_ALLOWED_ACTIONS[CREATE_ACTION].add(PERSONS_VIEW_NAME)
        PROMOTER_ALLOWED_ACTIONS[UPDATE_ACTION].add(PERSONS_RELATIONSHIPS_VIEW_NAME)
        PROMOTER_ALLOWED_ACTIONS[READ_ACTION].add(PERSONS_RELATIONSHIPS_VIEW_NAME)
        PROMOTER_ALLOWED_ACTIONS[CREATE_ACTION].add(PERSONS_RELATIONSHIPS_VIEW_NAME)
        PROMOTER_ALLOWED_ACTIONS[READ_ACTION].add(RESERVATIONS_VIEW_NAME)
        PROMOTER_ALLOWED_ACTIONS[CREATE_ACTION].add(RESERVATIONS_VIEW_NAME)
        PROMOTER_ALLOWED_ACTIONS[UPDATE_ACTION].add(RESERVATIONS_VIEW_NAME)
        PROMOTER_ALLOWED_ACTIONS[READ_ACTION].add(PERSON_RESERVATIONS_VIEW_NAME)
        PROMOTER_ALLOWED_ACTIONS[CREATE_ACTION].add(PERSON_RESERVATIONS_VIEW_NAME)
        PROMOTER_ALLOWED_ACTIONS[UPDATE_ACTION].add(PERSON_RESERVATIONS_VIEW_NAME)
        PROMOTER_ALLOWED_ACTIONS[DELETE_ACTION].add(PERSON_RESERVATIONS_VIEW_NAME)
        PROMOTER_ALLOWED_ACTIONS[READ_ACTION].add(PERSON_RESERVATION_BALANCE_VIEW_NAME)
        PROMOTER_ALLOWED_ACTIONS[READ_ACTION].add(RESERVATION_BALANCE_VIEW_NAME)
        PROMOTER_ALLOWED_ACTIONS[READ_ACTION].add(AVAILABLE_FUNDS_VIEW_NAME)
        PROMOTER_ALLOWED_ACTIONS[READ_ACTION].add(PACKAGES_VIEW_NAME)
        PROMOTER_ALLOWED_ACTIONS[READ_ACTION].add(PACKAGE_ACCESSES_VIEW_NAME)
        PROMOTER_ALLOWED_ACTIONS[READ_ACTION].add(PACKAGE_PRICE_RULES_VIEW_NAME)
        PROMOTER_ALLOWED_ACTIONS[READ_ACTION].add(PACKAGE_AMOUNT_CONSUMPTIONS_VIEW_NAME)
        PROMOTER_ALLOWED_ACTIONS[READ_ACTION].add(PACKAGE_MONEY_CONSUMPTIONS_VIEW_NAME)
        PROMOTER_ALLOWED_ACTIONS[READ_ACTION].add(ORDERS_VIEW_NAME)
        PROMOTER_ALLOWED_ACTIONS[CREATE_ACTION].add(ORDERS_VIEW_NAME)
        PROMOTER_ALLOWED_ACTIONS[READ_ACTION].add(PERSON_AMOUNT_CONSUMPTIONS_VIEW_NAME)
        PROMOTER_ALLOWED_ACTIONS[READ_ACTION].add(PERSON_MONEY_CONSUMPTIONS_VIEW_NAME)
        PROMOTER_ALLOWED_ACTIONS[READ_ACTION].add(SKU_CATEGORIES_VIEW_NAME)
        PROMOTER_ALLOWED_ACTIONS[READ_ACTION].add(SKUS_VIEW_NAME)
        PROMOTER_ALLOWED_ACTIONS[READ_ACTION].add(SKUS_SALES_VIEW_NAME)
        PROMOTER_ALLOWED_ACTIONS[READ_ACTION].add(LOCATIONS_VIEW_NAME)
        PROMOTER_ALLOWED_ACTIONS[READ_ACTION].add(CURRENCIES_VIEW_NAME)
        PROMOTER_ALLOWED_ACTIONS[UPDATE_ACTION].add(CLIENT_SENSORS_VIEW_NAME)

        for key in CASHIER_WAITER_ALLOWED_ACTIONS.keys():
            CASHIER_WAITER_ALLOWED_ACTIONS[key] = CASHIER_ALLOWED_ACTIONS[key].union(WAITER_ALLOWED_ACTIONS[key])


def does_user_has_permission(user, id_client, action, view, id_location, user_is_global_admin):
    init_global_variables()
    if user is None:
        return False
    elif user_is_global_admin:
        return True
    else:
        if user.idCliente != id_client:
            return False
        locations_by_role = RolesByLocation.get_roles_by_user(user.username, id_client)
        if locations_by_role.get(CLIENT_ADMIN, set()) is None or id_location in locations_by_role.get(CLIENT_ADMIN, set()):
            return True
        if locations_by_role.get(QUERY_USER, set()) is None or id_location in locations_by_role.get(QUERY_USER, set()):
            if action == READ_ACTION and view not in QUERY_USER_FORBIDDEN_VIEWS:
                return True
        for role in WHITELIST_ROLES:
            if action is not None and view is not None and view in WHITELIST_ROLES[role][action]:
                if locations_by_role.get(role, set()) is None or id_location in locations_by_role.get(role, set()):
                    return True
        return False


def is_global_admin(user):
    return user is not None and user.idCliente is None and RolesByLocation.user_has_role_on_client(user.username,
                                                                                                   user.idCliente,
                                                                                                   GLOBAL_ADMIN)


def validate_role_is_valid(role, name):
    role = role.lower()
    if role in VALID_CLIENT_ROLES:
        return role
    else:
        from commons.validations import USER_INVALID_ROLE_ERROR_CODE
        raise ValidationError(u"Invalid value for field {0}. Expected one of the folowwing values: {1}"
                              .format(name,
                                      VALID_CLIENT_ROLES),
                              internal_code=USER_INVALID_ROLE_ERROR_CODE)
