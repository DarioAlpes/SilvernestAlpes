swagger: '2.0'

info:
  version: "2.6.4"
  title: Documentación backend
  
host: smartobjectssas.appspot.com   
schemes:
  - https
  - http

consumes:
  - application/json
produces:
  - application/json
  
paths:
  /supported-tags/:
    get:
      description: |
        Obtiene la lista de `TagsSoportados` por el app
      responses:
        200:
          description: Consulta exitosa
          schema:
            title: TagsSoportados
            type: array
            items:
              $ref: '#/definitions/TagSoportado'
    post:
      parameters:
        - name: TagSoportado
          in: body
          required: true
          schema:
            $ref: '#/definitions/TagSoportado'
      description: |
        Crea un `TagSoportado` con los valores dados por parámetro
      responses:
        200:
          description: Creación exitosa
          schema:
            $ref: '#/definitions/TagSoportado'
        400:
          $ref: '#/responses/TagSoportadoInválido'
          
  /supported-tags/{id_tag_soportado}/:
    parameters:
      - $ref: '#/parameters/id_tag_soportado'
    get:
      description: |
        Obtiene el `TagSoportado` con id dado
      responses:
        200:
          description: Consulta exitosa
          schema:
            $ref: '#/definitions/TagSoportado'
        404:
          $ref: '#/responses/RecursoNoExiste'
    delete:
      description: |
        Elimina el `TagSoportado` con id dado y lo retorna
      responses:
        200:
          description: Eliminación exitosa
          schema:
            $ref: '#/definitions/TagSoportado'
        404:
          $ref: '#/responses/RecursoNoExiste'
          
  /sensors/:
    get:
      description: |
        Obtiene la lista de `Sensores` registrados
      responses:
        200:
          description: Consulta exitosa
          schema:
            title: Sensores
            type: array
            items:
              $ref: '#/definitions/Sensor'
    post:
      parameters:
        - name: Sensor
          in: body
          required: true
          schema:
            $ref: '#/definitions/Sensor'
      description: |
        Crea un `Sensor` con los valores dados por parámetro
      responses:
        200:
          description: Creación exitosa
          schema:
            $ref: '#/definitions/Sensor'
        400:
          $ref: '#/responses/SensorGlobalInválido'
          
  /sensors/{id_sensor}/:
    parameters:
      - $ref: '#/parameters/id_sensor'
    get:
      description: |
        Obtiene el `Sensor` global con id dado
      responses:
        200:
          description: Consulta exitosa
          schema:
            $ref: '#/definitions/Sensor'
        404:
          $ref: '#/responses/RecursoNoExiste'
    delete:
      description: |
        Elimina el `Sensor` con id dado y lo retorna
      responses:
        200:
          description: Eliminación exitosa
          schema:
            $ref: '#/definitions/Sensor'
        404:
          $ref: '#/responses/RecursoNoExiste'
          
  /clients/:
    get:
      description: |
        Obtiene la lista de `Clientes`
      responses:
        200:
          description: Consulta exitosa
          schema:
            title: Clientes
            type: array
            items:
              $ref: '#/definitions/Cliente'
    post:
      parameters:
        - name: Cliente
          in: body
          required: true
          schema:
            $ref: '#/definitions/Cliente'
      description: |
        Crea un `Cliente` con los valores dados por parámetro
      responses:
        200:
          description: Creación exitosa
          schema:
            $ref: '#/definitions/Cliente'
        400:
          $ref: '#/responses/ClienteInválido'
          
  /clients/{id_cliente}/:
    parameters:
      - $ref: '#/parameters/id_cliente'
    get:
      description: |
        Obtiene el `Cliente` con id dado
      responses:
        200:
          description: Consulta exitosa
          schema:
            $ref: '#/definitions/Cliente'
        404:
          $ref: '#/responses/RecursoNoExiste'
    delete:
      description: |
        Elimina el `Cliente` con id dado y lo retorna
      responses:
        200:
          description: Eliminación exitosa
          schema:
            $ref: '#/definitions/Cliente'
        404:
          $ref: '#/responses/RecursoNoExiste'
    put:
      parameters:
        - name: Cliente
          in: body
          required: true
          schema:
            $ref: '#/definitions/Cliente'
      description: |
        Actualiza el `Cliente` con id dado con los valores dados por parámetro
      responses:
        200:
          description: Actualización exitosa
          schema:
            $ref: '#/definitions/Cliente'
        400:
          $ref: '#/responses/ClienteInválido'
        404:
          $ref: '#/responses/RecursoNoExiste'
          
  /clients/{id_cliente}/secret-keys/:
    parameters:
      - $ref: '#/parameters/id_cliente'
    get:
      description: |
        Obtiene la lista de llaves secretas del `Cliente` dado. Actualmente corresponde a una única llave asociada a la codificación de los tags
      responses:
        200:
          description: Consulta exitosa
          schema:
            title: LlavesCliente
            type: array
            items:
              $ref: '#/definitions/LlaveCliente'
          
  /clients/{id_cliente}/transactions-per-user/:
    parameters:
      - $ref: '#/parameters/id_cliente'
      - $ref: '#/parameters/initial-time'
      - $ref: '#/parameters/final-time'
    get:
      description: |
        Obtiene el `ResumenTransaccionesUsuario` de cada usuario entre el rango de fechas dado para el cliente con id dado
      responses:
        200:
          description: Consulta exitosa
          schema:
            title: ResumenesTransaccionesUsuario
            type: array
            items:
              $ref: '#/definitions/ResumenTransaccionesUsuario'
        400:
          $ref: '#/responses/FechasReporteTransaccionesUsuarioInválidas'
        404:
          $ref: '#/responses/RecursoNoExiste'
          
  /clients/{id_cliente}/consumptions-per-sku/:
    parameters:
      - $ref: '#/parameters/id_cliente'
      - $ref: '#/parameters/initial-time'
      - $ref: '#/parameters/final-time'
    get:
      description: |
        Obtiene los `ResumenesConsumosPorSku` de cada SKU entre el rango de fechas dado para el cliente con id dado
      responses:
        200:
          description: Consulta exitosa
          schema:
            title: ResumenesConsumosPorSku
            type: array
            items:
              $ref: '#/definitions/ResumenConsumosPorSku'
        400:
          $ref: '#/responses/FechasReporteConsumosPorSkuInválidas'
        404:
          $ref: '#/responses/RecursoNoExiste'
          
  /clients/{id_cliente}/entities-per-user/:
    parameters:
      - $ref: '#/parameters/id_cliente'
      - $ref: '#/parameters/kind'
      - $ref: '#/parameters/initial-time'
      - $ref: '#/parameters/final-time'
      - $ref: '#/parameters/include-deleted'
    get:
      description: |
        Obtiene las `EntidadesCreadasPorUsuario` de cada usuario, i.e. la lista de entidades creadas por usuario con su fecha de creación, entre el rango de fechas dado para el cliente con id dado. Por defecto no incluye las entidades que hayan sido eliminadas. Sin embargo, si se envía el parámetro `include-deleted` con el valor de `true` se incluyen las entidades que hayan sido eliminadas. Para diferenciar entre las entidades que han sido eliminadas y las que no todas las entidades tienen la propiedad `entity-deleted` con el valor de `true` si han sido eliminadas y de `false` en caso contrario. La propiedad `entities.entity` tiene la entidad creada, esta propiedad va a tener las propiedades del `kind` correspondiente. Por ejemplo, si se envía `reservations` tendra todos los campos de la entidad `Reserva` más el campo `entity-deleted`
      responses:
        200:
          description: Consulta exitosa
          schema:
            title: ListaEntidadesCreadasPorUsuario
            type: array
            items:
              $ref: '#/definitions/EntidadesCreadasPorUsuario'
        400:
          $ref: '#/responses/ParámetrosEntidadesCreadasPorUsuarioInválidos'
        404:
          $ref: '#/responses/RecursoNoExiste'
          
  /clients/{id_cliente}/persons-reservations-activations-per-user/:
    parameters:
      - $ref: '#/parameters/id_cliente'
      - $ref: '#/parameters/initial-time'
      - $ref: '#/parameters/final-time'
    get:
      description: |
        Obtiene las `ActivacionesYDesactivacionesPorUsuario` de cada usuario, i.e. las lista de activaciones y desactivaciones de reservas personas realizadas por cada usuario en el rango de fechas dado. Una activación/desactivación corresponde a los ids que identifican la reserva persona más la fecha en que se realizo la operación de activación/desactivación
      responses:
        200:
          description: Consulta exitosa
          schema:
            title: ListaActivacionesYDesactivacionesPorUsuario
            type: array
            items:
              $ref: '#/definitions/ActivacionesYDesactivacionesPorUsuario'
        400:
          $ref: '#/responses/ParámetrosFechasActivacionPorUsuarioInválidos'
        404:
          $ref: '#/responses/RecursoNoExiste'
          
  /clients/{id_cliente}/tags/:
    parameters:
      - $ref: '#/parameters/id_cliente'
    get:
      description: |
        Da la lista de `TagsSoportados` usados por el cliente con id dado
      responses:
        200:
          description: Consulta exitosa
          schema:
            title: TagsSoportados
            type: array
            items:
              $ref: '#/definitions/TagSoportado'
        404:
          $ref: '#/responses/RecursoNoExiste'
    post:
      parameters:
        - name: NombreTag
          in: body
          required: true
          schema:
            $ref: '#/definitions/NombreTag'
      description: |
        Asocia el `TagSoportado` con nombre dado al cliente con id dado indicando que el cliente va a usar ese tag
      responses:
        200:
          description: Creación exitosa
          schema:
            $ref: '#/definitions/TagSoportado'
        400:
          $ref: '#/responses/NombreTagInválido'
        404:
          $ref: '#/responses/RecursoNoExiste'
          
  /clients/{id_cliente}/tags/{id_tag_cliente}/:
    parameters:
      - $ref: '#/parameters/id_cliente'
      - $ref: '#/parameters/id_tag_cliente'
    get:
      description: |
        Obtiene el `TagSoportado` con id dado si este tag es soportado por el cliente con id dado
      responses:
        200:
          description: Consulta exitosa
          schema:
            $ref: '#/definitions/TagSoportado'
        404:
          $ref: '#/responses/RecursoNoExiste'
    delete:
      description: |
        Elimina la asociación entre el cliente y el `TagSoportado` con id dado y lo retorna, indicando que el cliente ya no usa este tipo de tag
      responses:
        200:
          description: Eliminación exitosa
          schema:
            $ref: '#/definitions/TagSoportado'
        404:
          $ref: '#/responses/RecursoNoExiste'
          
  /clients/{id_cliente}/sensors/:
    parameters:
      - $ref: '#/parameters/id_cliente'
    get:
      description: |
        Da la lista de `Sensores` asignados al cliente con id dado
      responses:
        200:
          description: Consulta exitosa
          schema:
            title: Sensores
            type: array
            items:
              $ref: '#/definitions/Sensor'
        404:
          $ref: '#/responses/RecursoNoExiste'
    post:
      parameters:
        - name: Sensor
          in: body
          required: true
          schema:
            $ref: '#/definitions/Sensor'
      description: |
        Asocia el `Sensor` con id dado al cliente con id dado indicando que el cliente va a usar ese sensor
      responses:
        200:
          description: Creación exitosa
          schema:
            $ref: '#/definitions/Sensor'
        400:
          $ref: '#/responses/SensorClienteInválido'
        404:
          $ref: '#/responses/RecursoNoExiste'
          
  /clients/{id_cliente}/sensors/{id_sensor}/:
    parameters:
      - $ref: '#/parameters/id_cliente'
      - $ref: '#/parameters/id_sensor'
    get:
      description: |
        Obtiene el `Sensor` con id dado si este sensor esta siendo usado por el cliente con id dado
      responses:
        200:
          description: Consulta exitosa
          schema:
            $ref: '#/definitions/Sensor'
        404:
          $ref: '#/responses/RecursoNoExiste'
    delete:
      description: |
        Elimina la asociación entre el cliente y el `Sensor` con id dado y lo retorna, indicando que el cliente ya no usa este sensor
      responses:
        200:
          description: Eliminación exitosa
          schema:
            $ref: '#/definitions/Sensor'
        404:
          $ref: '#/responses/RecursoNoExiste'
    patch:
      parameters:
        - name: ActivaciónSensor
          in: body
          required: true
          schema:
            $ref: '#/definitions/ActivaciónSensor'
      description: |
        Servicio usado para indicar que los sensores estan recogiendo/terminaron de recoger datos e informar al servidor el estado de sincronización del servicio
      responses:
        200:
          description: Creación exitosa
          schema:
            $ref: '#/definitions/Sensor'
        400:
          $ref: '#/responses/ActivaciónSensorClienteInválido'
        404:
          $ref: '#/responses/RecursoNoExiste'
          
  /clients/{id_cliente}/location-tags/:
    parameters:
      - $ref: '#/parameters/id_cliente'
    get:
      description: |
        Obtiene los `Tags de Ubicaciones` existentes para el cliente con id `id_cliente`
      responses:
        200:
          description: Consulta exitosa
          schema:
            title: TagsUbicaciones
            type: array
            items:
              $ref: '#/definitions/TagUbicación'
        404:
          $ref: '#/responses/RecursoNoExiste'
    post:
      parameters:
        - name: Tag
          in: body
          required: true
          schema:
            $ref: '#/definitions/TagUbicación'
      description: |
        Crea un `TagUbicación` con los valores dados por parámetro
      responses:
        200:
          description: Creación exitosa
          schema:
            $ref: '#/definitions/TagUbicación'
        400:
          $ref: '#/responses/TagUbicaciónInválido'
        404:
          $ref: '#/responses/RecursoNoExiste'
          
  /clients/{id_cliente}/locations/:
    parameters:
      - $ref: '#/parameters/id_cliente'
      - $ref: '#/parameters/type'
    get:
      description: |
        Obtiene las `Ubicaciones` existentes para el cliente con id `id_cliente`
      responses:
        200:
          description: Consulta exitosa
          schema:
            title: Ubicaciones
            type: array
            items:
              $ref: '#/definitions/Ubicación'
        400:
          $ref: '#/responses/TipoUbicaciónInválida'
        404:
          $ref: '#/responses/RecursoNoExiste'
    post:
      parameters:
        - name: Ubicación
          in: body
          required: true
          schema:
            $ref: '#/definitions/Ubicación'
      description: |
        Crea una `Ubicación` con los valores dados por parámetro
      responses:
        200:
          description: Creación exitosa
          schema:
            $ref: '#/definitions/Ubicación'
        400:
          $ref: '#/responses/UbicaciónInválida'
        404:
          $ref: '#/responses/RecursoNoExiste'
          
  /clients/{id_cliente}/locations/{id_ubicación}/:
    parameters:
      - $ref: '#/parameters/id_cliente'
      - $ref: '#/parameters/id_ubicación'
    get:
      description: |
        Obtiene la `Ubicacion` con id dado para el cliente con id `id_cliente`
      responses:
        200:
          description: Consulta exitosa
          schema:
            $ref: '#/definitions/Ubicación'
        404:
          $ref: '#/responses/RecursoNoExiste'
    put:
      description: |
        Actualiza la `Ubicacion` con id con los valores dados por parámetro
      parameters:
        - name: Ubicación
          in: body
          required: true
          schema:
            $ref: '#/definitions/Ubicación'
      responses:
        200:
          description: Actualización exitosa
          schema:
            $ref: '#/definitions/Ubicación'
        400:
          $ref: '#/responses/UbicaciónInválida'
        404:
          $ref: '#/responses/RecursoNoExiste'
    patch:
      description: |
        Activa o desactiva la `Ubicacion` con id dado para el cliente con id `id_cliente`
      parameters:
        - name: active
          in: body
          required: true
          schema:
            title: active
            type: object
            required:
              - active
            properties:
              active:
                description: 'True si se va a activar la ubicación, false si se va a desactivar'
                type: boolean
      responses:
        200:
          description: Activación/desactivación exitosa
          schema:
            $ref: '#/definitions/Ubicación'
        400:
          $ref: '#/responses/UbicaciónInválida'
        404:
          $ref: '#/responses/RecursoNoExiste'
          
  /clients/{id_cliente}/locations/{id_ubicación}/children/:
    parameters:
      - $ref: '#/parameters/id_cliente'
      - $ref: '#/parameters/id_ubicación'
    get:
      description: |
        Obtiene las `Ubicaciones` hijo de la ubicación con id dado para el cliente con id `id_cliente`
      responses:
        200:
          description: Consulta exitosa
          schema:
            title: Ubicaciones
            type: array
            items:
              $ref: '#/definitions/Ubicación'
        404:
          $ref: '#/responses/RecursoNoExiste'
          
  /clients/{id_cliente}/active-locations/:
    parameters:
      - $ref: '#/parameters/id_cliente'
    get:
      description: |
        Obtiene las `Ubicaciones` activas del cliente con id `id_cliente`
      responses:
        200:
          description: Consulta exitosa
          schema:
            title: Ubicaciones
            type: array
            items:
              $ref: '#/definitions/Ubicación'
        404:
          $ref: '#/responses/RecursoNoExiste'
          
  /clients/{id_cliente}/locations/{id_ubicación}/image-url/:
    parameters:
      - $ref: '#/parameters/id_cliente'
      - $ref: '#/parameters/id_ubicación'
    get:
      description: |
        Obtiene una URL en la que se puede cargar la imagen de la `Ubicación` con id dado para el cliente con id `id_cliente`. Ver servicio `/{url_imagen}/`
      responses:
        200:
          description: Consulta exitosa
          schema:
            $ref: '#/definitions/ImageURL'
        404:
          $ref: '#/responses/RecursoNoExiste'
          
  /clients/{id_cliente}/locations/{id_ubicación}/image/:
    parameters:
      - $ref: '#/parameters/id_cliente'
      - $ref: '#/parameters/id_ubicación'
    get:
      description: |
        Obtiene la imagen de la `Ubicación` con id dado para el cliente con id `id_cliente`
      produces: 
        - image/*
        - application/json
      responses:
        200:
          description: Consulta exitosa
          schema:
            title: file
            type: file
            format: image
        404:
          $ref: '#/responses/RecursoNoExiste'
    delete:
      description: |
        Elimina la imagen de la `Ubicación` con id dado para el cliente con id `id_cliente` y retorna la ubicación modificada
      responses:
        200:
          description: Eliminación exitosa
          schema:
            $ref: '#/definitions/Ubicación'
        404:
          $ref: '#/responses/RecursoNoExiste'
          
  /{url_imagen}/:
    parameters:
      - $ref: '#/parameters/url_imagen'
    post:
      description: |
        Agrega la imagen dada a la entidad usada para crear `url_imagen`
      consumes: 
        - multipart/form-data
      parameters:
        - name: file
          in: formData
          description: La imagen a subir
          required: true
          type: file
      responses:
        200:
          description: Creación exitosa
          schema:
            description: |
                'Objeto usado para generar `url_image` después de agregar la imagen'
            title: ObjetoConImagen
            type: object
            required:
              - image-key
            properties:
              image-key:
                description: 'Cadena correspondiente a la imagen asociada al objeto. El valor null representa la ausencia de imagen'
                type: string
        400:
          $ref: '#/responses/ImagenInválida'
        404:
          $ref: '#/responses/RecursoNoExiste'
          
  /clients/{id_cliente}/location-fields-optionalities/:
    parameters:
      - $ref: '#/parameters/id_cliente'
    get:
      description: |
        Obtiene las `Opcionalidades` de la vista `locations` para el cliente con id `id_cliente`
      responses:
        200:
          description: Consulta exitosa
          schema:
            title: Opcionalidades
            type: array
            items:
              $ref: '#/definitions/Opcionalidad'
        404:
          $ref: '#/responses/RecursoNoExiste'
          
  /clients/{id_cliente}/location-fields-optionalities/{nombre_campo}/:
    parameters:
      - $ref: '#/parameters/id_cliente'
      - $ref: '#/parameters/nombre_campo'
    put:
      description: |
        Cambia la `Opcionalidad` del campo `nombre_campo` de la vista `locations` para el cliente con id `id_cliente`
      parameters:
        - name: Opcionalidad
          in: body
          required: true
          schema:
            $ref: '#/definitions/Opcionalidad'
      responses:
        200:
          description: Consulta exitosa
          schema:
            $ref: '#/definitions/Opcionalidad'
        400:
          $ref: '#/responses/OpcionalidadInválida'
        404:
          $ref: '#/responses/RecursoNoExiste'
  
  /clients/{id_cliente}/users/:
    parameters:
      - $ref: '#/parameters/id_cliente'
    get:
      description: |
        Obtiene los `Usuarios` existentes para el cliente con id `id_cliente`
      responses:
        200:
          description: Consulta exitosa
          schema:
            title: Usuarios
            type: array
            items:
              $ref: '#/definitions/DatosUsuario'
        404:
          $ref: '#/responses/RecursoNoExiste'
    post:
      parameters:
        - name: Usuario
          in: body
          required: true
          schema:
            $ref: '#/definitions/Usuario'
      description: |
        Crea un `Usuario` con los valores dados por parámetro
      responses:
        200:
          description: Creación exitosa
          schema:
            $ref: '#/definitions/DatosUsuario'
        400:
          $ref: '#/responses/UsuarioInválido'
        404:
          $ref: '#/responses/RecursoNoExiste'
          
  /clients/{id_cliente}/users/{username}/:
    parameters:
      - $ref: '#/parameters/id_cliente'
      - $ref: '#/parameters/username'
    delete:
      description: |
        Elimina el `Usuario` con usuario `username` para el cliente con id `id_cliente`
      responses:
        200:
          description: Eliminación exitosa
          schema:
            $ref: '#/definitions/DatosUsuario'
        404:
          $ref: '#/responses/RecursoNoExiste'
    patch:
      parameters:
        - name: Contraseña
          in: body
          required: true
          schema:
            $ref: '#/definitions/Password'
      description: |
        Cambia la contraseña del `Usuario` con el valor dado por parámetro
      responses:
        200:
          description: Contraseña cambiada exitosamente
          schema:
            $ref: '#/definitions/DatosUsuario'
        400:
          $ref: '#/responses/UsuarioInválido'
        404:
          $ref: '#/responses/RecursoNoExiste'
          
  /clients/{id_cliente}/users/{username}/login/:
    parameters:
      - $ref: '#/parameters/id_cliente'
      - $ref: '#/parameters/username'
    post:
      parameters:
        - name: Contraseña
          in: body
          required: true
          schema:
            $ref: '#/definitions/Password'
      description: |
        Autentica al `Usuario`
      responses:
        200:
          description: Autenticación exitosa
          schema:
            $ref: '#/definitions/DatosUsuario'
        404:
          $ref: '#/responses/RecursoNoExiste'
          
  /clients/{id_cliente}/users/{username}/logout/:
    parameters:
      - $ref: '#/parameters/id_cliente'
      - $ref: '#/parameters/username'
    get:
      description: |
        Hace logout del `Usuario`
      responses:
        200:
          description: Logout exitoso
          schema:
            $ref: '#/definitions/DatosUsuario'
        404:
          $ref: '#/responses/RecursoNoExiste'
          
  /users/{username}/:
    parameters:
      - $ref: '#/parameters/username'
    patch:
      parameters:
        - name: Contraseña
          in: body
          required: true
          schema:
            $ref: '#/definitions/Password'
      description: |
        Cambia la contraseña del `Usuario` global con el valor dado por parámetro
      responses:
        200:
          description: Contraseña cambiada exitosamente
          schema:
            $ref: '#/definitions/DatosUsuario'
        400:
          $ref: '#/responses/UsuarioInválido'
        404:
          $ref: '#/responses/RecursoNoExiste'
          
  /users/{username}/login/:
    parameters:
      - $ref: '#/parameters/username'
    post:
      parameters:
        - name: Contraseña
          in: body
          required: true
          schema:
            $ref: '#/definitions/Password'
      description: |
        Autentica al `Usuario` global
      responses:
        200:
          description: Autenticación exitosa
          schema:
            $ref: '#/definitions/DatosUsuario'
        404:
          $ref: '#/responses/RecursoNoExiste'
          
  /users/{username}/logout/:
    parameters:
      - $ref: '#/parameters/username'
    get:
      description: |
        Hace logout del `Usuario` global
      responses:
        200:
          description: Logout exitoso
          schema:
            $ref: '#/definitions/DatosUsuario'
        404:
          $ref: '#/responses/RecursoNoExiste'
  
  /clients/{id_cliente}/currencies/:
    parameters:
      - $ref: '#/parameters/id_cliente'
    get:
      description: |
        Obtiene las `Monedas` existentes para el cliente con id `id_cliente`
      responses:
        200:
          description: Consulta exitosa
          schema:
            title: Monedas
            type: array
            items:
              $ref: '#/definitions/Moneda'
        404:
          $ref: '#/responses/RecursoNoExiste'
    post:
      parameters:
        - name: Moneda
          in: body
          required: true
          schema:
            $ref: '#/definitions/Moneda'
      description: |
        Crea una `Moneda` con los valores dados por parámetro
      responses:
        200:
          description: Creación exitosa
          schema:
            $ref: '#/definitions/Moneda'
        400:
          $ref: '#/responses/MonedaInválida'
        404:
          $ref: '#/responses/RecursoNoExiste'
  
  /clients/{id_cliente}/currencies/{id_moneda}/:
    parameters:
      - $ref: '#/parameters/id_cliente'
      - $ref: '#/parameters/id_moneda'
    get:
      description: |
        Obtiene la `Moneda` con id dado para el cliente con id `id_cliente`
      responses:
        200:
          description: Consulta exitosa
          schema:
            $ref: '#/definitions/Moneda'
        404:
          $ref: '#/responses/RecursoNoExiste'
          
  /clients/{id_cliente}/sku-categories/:
    parameters:
      - $ref: '#/parameters/id_cliente'
    get:
      description: |
        Obtiene las `CategoríasSKU` existentes para el cliente con id `id_cliente`
      responses:
        200:
          description: Consulta exitosa
          schema:
            title: CategoríasSKU
            type: array
            items:
              $ref: '#/definitions/CategoríaSKU'
        404:
          $ref: '#/responses/RecursoNoExiste'
    post:
      parameters:
        - name: CategoríaSKU
          in: body
          required: true
          schema:
            $ref: '#/definitions/CategoríaSKU'
      description: |
        Crea una `CategoríaSKU` con los valores dados por parámetro
      responses:
        200:
          description: Creación exitosa
          schema:
            $ref: '#/definitions/CategoríaSKU'
        400:
          $ref: '#/responses/CategoríaSKUInválida'
        404:
          $ref: '#/responses/RecursoNoExiste'
  
  /clients/{id_cliente}/sku-categories/{id_categoría_sku}/:
    parameters:
      - $ref: '#/parameters/id_cliente'
      - $ref: '#/parameters/id_categoría_sku'
    get:
      description: |
        Obtiene la `CategoríaSKU` con id dado para el cliente con id `id_cliente`
      responses:
        200:
          description: Consulta exitosa
          schema:
            $ref: '#/definitions/CategoríaSKU'
        404:
          $ref: '#/responses/RecursoNoExiste'
    put:
      description: |
        Actualiza la `CategoríaSKU` con los valores dados por parámetro
      parameters:
        - name: CategoríaSKU
          in: body
          required: true
          schema:
            $ref: '#/definitions/CategoríaSKU'
      responses:
        200:
          description: Actualización exitosa
          schema:
            $ref: '#/definitions/CategoríaSKU'
        400:
          $ref: '#/responses/CategoríaSKUInválida'
        404:
          $ref: '#/responses/RecursoNoExiste'
  
  /clients/{id_cliente}/sku-categories/{id_categoría_sku}/children/:
    parameters:
      - $ref: '#/parameters/id_cliente'
      - $ref: '#/parameters/id_categoría_sku'
    get:
      description: |
        Obtiene las `CategoríasSKU` hijo de la categoría con id dado para el cliente con id `id_cliente`
      responses:
        200:
          description: Consulta exitosa
          schema:
            title: CategoríasSKU
            type: array
            items:
              $ref: '#/definitions/CategoríaSKU'
        404:
          $ref: '#/responses/RecursoNoExiste'
  
  /clients/{id_cliente}/skus/:
    parameters:
      - $ref: '#/parameters/id_cliente'
    get:
      description: |
        Obtiene los `SKUs` existentes para el cliente con id `id_cliente`
      responses:
        200:
          description: Consulta exitosa
          schema:
            title: SKUs
            type: array
            items:
              $ref: '#/definitions/SKU'
        404:
          $ref: '#/responses/RecursoNoExiste'
    post:
      parameters:
        - name: SKU
          in: body
          required: true
          schema:
            $ref: '#/definitions/SKU'
      description: |
        Crea un `SKU` con los valores dados por parámetro
      responses:
        200:
          description: Creación exitosa
          schema:
            $ref: '#/definitions/SKU'
        400:
          $ref: '#/responses/SKUInválido'
        404:
          $ref: '#/responses/RecursoNoExiste'
  
  /clients/{id_cliente}/skus/{id_sku}/:
    parameters:
      - $ref: '#/parameters/id_cliente'
      - $ref: '#/parameters/id_sku'
    get:
      description: |
        Obtiene el `SKU` con id dado para el cliente con id `id_cliente`
      responses:
        200:
          description: Consulta exitosa
          schema:
            $ref: '#/definitions/SKU'
        404:
          $ref: '#/responses/RecursoNoExiste'
    put:
      description: |
        Actualiza el `SKU` con los valores dados por parámetro
      parameters:
        - name: SKU
          in: body
          required: true
          schema:
            $ref: '#/definitions/SKU'
      responses:
        200:
          description: Actualización exitosa
          schema:
            $ref: '#/definitions/SKU'
        400:
          $ref: '#/responses/SKUInválido'
        404:
          $ref: '#/responses/RecursoNoExiste'      
          
  /clients/{id_cliente}/skus/{id_sku}/image-url/:
    parameters:
      - $ref: '#/parameters/id_cliente'
      - $ref: '#/parameters/id_sku'
    get:
      description: |
        Obtiene una URL en la que se puede cargar la imagen del `SKU` con id dado para el cliente con id `id_cliente`. Ver servicio `/{url_imagen}/`
      responses:
        200:
          description: Consulta exitosa
          schema:
            $ref: '#/definitions/ImageURL'
        404:
          $ref: '#/responses/RecursoNoExiste'
          
  /clients/{id_cliente}/skus/{id_sku}/image/:
    parameters:
      - $ref: '#/parameters/id_cliente'
      - $ref: '#/parameters/id_sku'
    get:
      description: |
        Obtiene la imagen del `SKU` con id dado para el cliente con id `id_cliente`
      produces: 
        - image/*
        - application/json
      responses:
        200:
          description: Consulta exitosa
          schema:
            title: file
            type: file
            format: image
        404:
          $ref: '#/responses/RecursoNoExiste'
    delete:
      description: |
        Elimina la imagen del `SKU` con id dado para el cliente con id `id_cliente` y retorna el sku modificado
      responses:
        200:
          description: Eliminación exitosa
          schema:
            $ref: '#/definitions/SKU'
        404:
          $ref: '#/responses/RecursoNoExiste'

  /clients/{id_cliente}/skus/{id_sku}/sales-locations/:
    parameters:
      - $ref: '#/parameters/id_cliente'
      - $ref: '#/parameters/id_sku'
    get:
      description: |
        Obtiene los `PuntosDeVenta` donde se vende el SKU con id dado para el cliente con id `id_cliente`. Contiene los mismos campos que la `Ubicación` asociada más el campo `price`
      responses:
        200:
          description: Consulta exitosa
          schema:
            title: PuntosDeVenta
            type: array
            items:
              $ref: '#/definitions/PuntoDeVenta'
        404:
          $ref: '#/responses/RecursoNoExiste'
    post:
      description: |
        Crea una `UbicaciónVentaSKU` para el SKU con id dado con los valores dados por parámetro
      parameters:
        - name: UbicaciónVentaSKU
          in: body
          required: true
          schema:
            $ref: '#/definitions/UbicaciónVentaSKU'
      responses:
        200:
          description: Creación exitosa
          schema:
            $ref: '#/definitions/UbicaciónVentaSKU'
        400:
          $ref: '#/responses/UbicaciónVentaSKUInválida'
        404:
          $ref: '#/responses/RecursoNoExiste'
  
  /clients/{id_cliente}/skus/{id_sku}/sales-locations/{id_ubicación}/:
    parameters:
      - $ref: '#/parameters/id_cliente'
      - $ref: '#/parameters/id_sku'
      - $ref: '#/parameters/id_ubicación'
    delete:
      description: |
        Elimina la `UbicaciónVentaSKU` para la `Ubicación` y `SKU` con los ids dados para el cliente con id `id_cliente`
      responses:
        200:
          description: Eliminación exitosa
          schema:
            $ref: '#/definitions/UbicaciónVentaSKU'
        404:
          $ref: '#/responses/RecursoNoExiste'
          
  /clients/{id_cliente}/locations/{id_ubicación}/skus-on-sale/:
    parameters:
      - $ref: '#/parameters/id_cliente'
      - $ref: '#/parameters/id_ubicación'
    get:
      description: |
        Obtiene los `SKUsEnPuntoDeVenta` que se venden en la `Ubicación` con id dado para el cliente con id `id_cliente`.  Contiene los mismos campos que el `SKU` asociado más el campo `price`
      responses:
        200:
          description: Consulta exitosa
          schema:
            title: SKUsEnPuntoDeVenta
            type: array
            items:
              $ref: '#/definitions/SKUEnPuntoDeVenta'
        404:
          $ref: '#/responses/RecursoNoExiste'
    post:
      description: |
        Crea un `SKUenVenta` para la Ubicación con id dado con los valores dados por parámetro
      parameters:
        - name: SKUenVenta
          in: body
          required: true
          schema:
            $ref: '#/definitions/SKUenVenta'
      responses:
        200:
          description: Creación exitosa
          schema:
            $ref: '#/definitions/SKUenVenta'
        400:
          $ref: '#/responses/SKUenVentaInválido'
        404:
          $ref: '#/responses/RecursoNoExiste'
  
  /clients/{id_cliente}/locations/{id_ubicación}/skus-on-sale/{id_sku}/:
    parameters:
      - $ref: '#/parameters/id_cliente'
      - $ref: '#/parameters/id_sku'
      - $ref: '#/parameters/id_ubicación'
    delete:
      description: |
        Elimina el `SKUenVenta` para la `Ubicación` y `SKU` con los ids dados para el cliente con id `id_cliente`
      responses:
        200:
          description: Eliminación exitosa
          schema:
            $ref: '#/definitions/SKUenVenta'
        404:
          $ref: '#/responses/RecursoNoExiste'
  
  /clients/{id_cliente}/persons/:
    parameters:
      - $ref: '#/parameters/id_cliente'
    get:
      description: |
        Obtiene las `Personas` existentes para el cliente con id `id_cliente`
      responses:
        200:
          description: Consulta exitosa
          schema:
            title: Personas
            type: array
            items:
              $ref: '#/definitions/Persona'
        404:
          $ref: '#/responses/RecursoNoExiste'
    post:
      parameters:
        - name: Persona
          in: body
          required: true
          schema:
            $ref: '#/definitions/Persona'
      description: |
        Crea una `Persona` con los valores dados por parámetro
      responses:
        200:
          description: Creación exitosa
          schema:
            $ref: '#/definitions/Persona'
        400:
          $ref: '#/responses/PersonaInválida'
        404:
          $ref: '#/responses/RecursoNoExiste'
  
  /clients/{id_cliente}/persons/{id_persona}/:
    parameters:
      - $ref: '#/parameters/id_cliente'
      - $ref: '#/parameters/id_persona'
    get:
      description: |
        Obtiene la `Persona` con id dado para el cliente con id `id_cliente`
      responses:
        200:
          description: Consulta exitosa
          schema:
            $ref: '#/definitions/Persona'
        404:
          $ref: '#/responses/RecursoNoExiste'
    put:
      description: |
        Actualiza la `Persona` con los valores dados por parámetro
      parameters:
        - name: Persona
          in: body
          required: true
          schema:
            $ref: '#/definitions/Persona'
      responses:
        200:
          description: Actualización exitosa
          schema:
            $ref: '#/definitions/Persona'
        400:
          $ref: '#/responses/PersonaInválida'
        404:
          $ref: '#/responses/RecursoNoExiste'  
    delete:
      description: |
        Elimina la `Persona` con id dado para el cliente con id `id_cliente`
      responses:
        200:
          description: Eliminación exitosa
          schema:
            $ref: '#/definitions/Persona'
        404:
          $ref: '#/responses/RecursoNoExiste'  
          
  /clients/{id_cliente}/person-by-id/:
    parameters:
      - $ref: '#/parameters/id_cliente'
      - $ref: '#/parameters/document-type'
      - $ref: '#/parameters/document-number'
    get:
      description: |
        Obtiene la `Persona` con tipo de documento `document-type` y número de documento `document-number` para el cliente con id `id_cliente`. Si el cliente tiene definido el parámetro `external-person-service` se consulta el servicio correspondiente y, en caso de encontrarse la persona, se actualiza la `Persona`, sus `Personas` relacionadas y las `RelacionesPersona` correspondientes con los datos retornados por el servicio externo.
      responses:
        200:
          description: Consulta exitosa
          schema:
            $ref: '#/definitions/Persona'
        400:
          $ref: '#/responses/DocumentoDePersonaInválidoParaPersona'
        404:
          $ref: '#/responses/RecursoNoExiste'
  
  /clients/{id_cliente}/persons/{id_persona}/image-url/:
    parameters:
      - $ref: '#/parameters/id_cliente'
      - $ref: '#/parameters/id_persona'
    get:
      description: |
        Obtiene una URL en la que se puede cargar la imagen de la `Persona` con id dado para el cliente con id `id_cliente`. Ver servicio `/{url_imagen}/`
      responses:
        200:
          description: Consulta exitosa
          schema:
            $ref: '#/definitions/ImageURL'
        404:
          $ref: '#/responses/RecursoNoExiste'
          
  /clients/{id_cliente}/persons/{id_persona}/image/:
    parameters:
      - $ref: '#/parameters/id_cliente'
      - $ref: '#/parameters/id_persona'
    get:
      description: |
        Obtiene la imagen de la `Persona` con id dado para el cliente con id `id_cliente`
      produces: 
        - image/*
        - application/json
      responses:
        200:
          description: Consulta exitosa
          schema:
            title: file
            type: file
            format: image
        404:
          $ref: '#/responses/RecursoNoExiste'
    delete:
      description: |
        Elimina la imagen de la `Persona` con id dado para el cliente con id `id_cliente` y retorna la persona modificada
      responses:
        200:
          description: Eliminación exitosa
          schema:
            $ref: '#/definitions/Persona'
        404:
          $ref: '#/responses/RecursoNoExiste'
  
  /clients/{id_cliente}/person-fields-optionalities/:
    parameters:
      - $ref: '#/parameters/id_cliente'
    get:
      description: |
        Obtiene las `Opcionalidades` de la vista `person` para el cliente con id `id_cliente`
      responses:
        200:
          description: Consulta exitosa
          schema:
            title: Opcionalidades
            type: array
            items:
              $ref: '#/definitions/Opcionalidad'
        404:
          $ref: '#/responses/RecursoNoExiste'
          
  /clients/{id_cliente}/person-fields-optionalities/{nombre_campo}/:
    parameters:
      - $ref: '#/parameters/id_cliente'
      - $ref: '#/parameters/nombre_campo'
    put:
      description: |
        Cambia la `Opcionalidad` del campo `nombre_campo` de la vista `person` para el cliente con id `id_cliente`
      parameters:
        - name: Opcionalidad
          in: body
          required: true
          schema:
            $ref: '#/definitions/Opcionalidad'
      responses:
        200:
          description: Consulta exitosa
          schema:
            $ref: '#/definitions/Opcionalidad'
        400:
          $ref: '#/responses/OpcionalidadInválida'
        404:
          $ref: '#/responses/RecursoNoExiste'
          
  
  /clients/{id_cliente}/persons/{id_persona}/relationships/:
    parameters:
      - $ref: '#/parameters/id_cliente'
      - $ref: '#/parameters/id_persona'
    get:
      description: |
        Obtiene las `PersonasConRelación` asociadas a la persona con id `id_persona` en el cliente con id `id_cliente`
      responses:
        200:
          description: Consulta exitosa
          schema:
            title: Personas
            type: array
            items:
              $ref: '#/definitions/PersonaConRelación'
        404:
          $ref: '#/responses/RecursoNoExiste'
    post:
      parameters:
        - name: RelaciónPersona
          in: body
          required: true
          schema:
            $ref: '#/definitions/RelaciónPersona'
      description: |
        Crea una `PersonaConRelación` con los valores dados por parámetro
      responses:
        200:
          description: Creación exitosa
          schema:
            $ref: '#/definitions/PersonaConRelación'
        400:
          $ref: '#/responses/RelaciónPersonaInválida'
        404:
          $ref: '#/responses/RecursoNoExiste'
  
  /clients/{id_cliente}/persons/{id_persona}/relationships/{id_persona_relacionada}/:
    parameters:
      - $ref: '#/parameters/id_cliente'
      - $ref: '#/parameters/id_persona'
      - $ref: '#/parameters/id_persona_relacionada'
    get:
      description: |
        Obtiene la `PersonaConRelación` cuya persona de origen tiene id `id_persona` y cuya persona destino tiene id `id_persona_relacionada` para el cliente con id `id_cliente`
      responses:
        200:
          description: Consulta exitosa
          schema:
            $ref: '#/definitions/PersonaConRelación'
        404:
          $ref: '#/responses/RecursoNoExiste'
    delete:
      description: |
        Elimina la `RelaciónPersona` entre las personas con id `id_persona` y `id_persona_relacionada` para el cliente con id `id_cliente`
      responses:
        200:
          description: Eliminación exitosa
          schema:
            $ref: '#/definitions/PersonaConRelación'
        404:
          $ref: '#/responses/RecursoNoExiste' 
  
  /clients/{id_cliente}/social-events/:
    parameters:
      - $ref: '#/parameters/id_cliente'
    get:
      description: |
        Obtiene los `EventosSociales` existentes para el cliente con id `id_cliente`
      responses:
        200:
          description: Consulta exitosa
          schema:
            title: EventosSociales
            type: array
            items:
              $ref: '#/definitions/EventoSocial'
        404:
          $ref: '#/responses/RecursoNoExiste'
    post:
      parameters:
        - name: EventoSocial
          in: body
          required: true
          schema:
            $ref: '#/definitions/EventoSocial'
      description: |
        Crea un `EventoSocial` con los valores dados por parámetro
      responses:
        200:
          description: Creación exitosa
          schema:
            $ref: '#/definitions/EventoSocial'
        400:
          $ref: '#/responses/EventoSocialInválido'
        404:
          $ref: '#/responses/RecursoNoExiste'
  
  /clients/{id_cliente}/social-events/{id_evento_social}/:
    parameters:
      - $ref: '#/parameters/id_cliente'
      - $ref: '#/parameters/id_evento_social'
    get:
      description: |
        Obtiene el `EventoSocial` con id dado para el cliente con id `id_cliente`
      responses:
        200:
          description: Consulta exitosa
          schema:
            $ref: '#/definitions/EventoSocial'
        404:
          $ref: '#/responses/RecursoNoExiste'
  
  /clients/{id_cliente}/packages/:
    parameters:
      - $ref: '#/parameters/id_cliente'
      - $ref: '#/parameters/base-time'
    get:
      description: |
        Obtiene los `Paquetes` activos existentes para el cliente con id `id_cliente`. Si se envía el parámetro `base-time` se retornan solo los paquetes que incluyan esta fecha dentro de su tiempo de válidez
      responses:
        200:
          description: Consulta exitosa
          schema:
            title: Paquetes
            type: array
            items:
              $ref: '#/definitions/Paquete'
        400:
          $ref: '#/responses/FechaBaseInválidaParaPaquete'
        404:
          $ref: '#/responses/RecursoNoExiste'
    post:
      parameters:
        - name: Paquete
          in: body
          required: true
          schema:
            $ref: '#/definitions/Paquete'
      description: |
        Crea un `Paquete` con los valores dados por parámetro
      responses:
        200:
          description: Creación exitosa
          schema:
            $ref: '#/definitions/Paquete'
        400:
          $ref: '#/responses/PaqueteInválido'
        404:
          $ref: '#/responses/RecursoNoExiste'
  
  /clients/{id_cliente}/packages/{id_paquete}/:
    parameters:
      - $ref: '#/parameters/id_cliente'
      - $ref: '#/parameters/id_paquete'
    get:
      description: |
        Obtiene el `Paquete` activo con id dado para el cliente con id `id_cliente`
      responses:
        200:
          description: Consulta exitosa
          schema:
            $ref: '#/definitions/Paquete'
        404:
          $ref: '#/responses/RecursoNoExiste'
    put:
      description: |
        Actualiza el `Paquete` con los valores dados por parámetro. Si el paquete tiene reservas asociadas se crea una copia del paquete a la que se le aplican los cambios correspondientes. De esta forma las reservas ya existentes conservan los consumos y accesos del paquete original. El resultado sera un paquete con el mismo `id` pero diferente `historic-id`.
      parameters:
        - name: Paquete
          in: body
          required: true
          schema:
            $ref: '#/definitions/Paquete'
      responses:
        200:
          description: Actualización exitosa
          schema:
            $ref: '#/definitions/Paquete'
        400:
          $ref: '#/responses/PaqueteInválido'
        404:
          $ref: '#/responses/RecursoNoExiste' 
    
  /clients/{id_cliente}/all-packages/:
    parameters:
      - $ref: '#/parameters/id_cliente'
    get:
      description: |
        Obtiene todos los `Paquetes`, activos e inactivos, existentes para el cliente con id `id_cliente`
      responses:
        200:
          description: Consulta exitosa
          schema:
            title: Paquetes
            type: array
            items:
              $ref: '#/definitions/Paquete'
        404:
          $ref: '#/responses/RecursoNoExiste'
  
  /clients/{id_cliente}/packages/{id_paquete}/price-rules/:
    parameters:
      - $ref: '#/parameters/id_cliente'
      - $ref: '#/parameters/id_paquete'
    get:
      description: |
        Obtiene las `ReglasPrecio` activos del paquete con id `id_paquete` existentes para el cliente con id `id_cliente`
      responses:
        200:
          description: Consulta exitosa
          schema:
            title: ReglasPrecio
            type: array
            items:
              $ref: '#/definitions/ReglaPrecio'
        404:
          $ref: '#/responses/RecursoNoExiste'
    post:
      parameters:
        - name: ReglaPrecio
          in: body
          required: true
          schema:
            $ref: '#/definitions/ReglaPrecio'
      description: |
        Crea una `ReglaPrecio` con los valores dados por parámetro para el paquete con id `id_paquete`. Si el paquete tiene reservas asociadas se crea una copia del paquete a la que se le asigna la regla creado. Ver servicio PUT de `/clients/{id_cliente}/packages/{id_paquete}/`
      responses:
        200:
          description: Creación exitosa
          schema:
            $ref: '#/definitions/ReglaPrecio'
        400:
          $ref: '#/responses/ReglaPrecioInválida'
        404:
          $ref: '#/responses/RecursoNoExiste'
  
  /clients/{id_cliente}/packages/{id_paquete}/price-rules/{id_regla_precio_paquete}/:
    parameters:
      - $ref: '#/parameters/id_cliente'
      - $ref: '#/parameters/id_paquete'
      - $ref: '#/parameters/id_regla_precio_paquete'
    get:
      description: |
        Obtiene la `ReglaPrecio` activo con id dado del paquete con id `id_paquete` para el cliente con id `id_cliente`
      responses:
        200:
          description: Consulta exitosa
          schema:
            $ref: '#/definitions/ReglaPrecio'
        404:
          $ref: '#/responses/RecursoNoExiste'
    delete:
      description: |
        Elimina la `ReglaPrecio` con id dado. Si el paquete tiene reservas asociadas se crea una copia del paquete, incluyendo sus `ReglasPrecio`, y se elimina la regla solo para el paquete activo. Ver servicio PUT de `/clients/{id_cliente}/packages/{id_paquete}/`
      parameters:
        - name: ReglaPrecio
          in: body
          required: true
          schema:
            $ref: '#/definitions/ReglaPrecio'
      responses:
        200:
          description: Eliminación exitosa
          schema:
            $ref: '#/definitions/ReglaPrecio'
        404:
          $ref: '#/responses/RecursoNoExiste' 
  
  /clients/{id_cliente}/packages/{id_paquete}/accesses/:
    parameters:
      - $ref: '#/parameters/id_cliente'
      - $ref: '#/parameters/id_paquete'
    get:
      description: |
        Obtiene los `AccesosPaquete` activos del paquete con id `id_paquete` existentes para el cliente con id `id_cliente`
      responses:
        200:
          description: Consulta exitosa
          schema:
            title: AccesosPaquete
            type: array
            items:
              $ref: '#/definitions/AccesoPaquete'
        404:
          $ref: '#/responses/RecursoNoExiste'
    post:
      parameters:
        - name: AccesoPaquete
          in: body
          required: true
          schema:
            $ref: '#/definitions/AccesoPaquete'
      description: |
        Crea un `AccesoPaquete` con los valores dados por parámetro para el paquete con id `id_paquete`. Si el paquete tiene reservas asociadas se crea una copia del paquete a la que se le asigna el acceso creado. Ver servicio PUT de `/clients/{id_cliente}/packages/{id_paquete}/`
      responses:
        200:
          description: Creación exitosa
          schema:
            $ref: '#/definitions/AccesoPaquete'
        400:
          $ref: '#/responses/AccesoPaqueteInválido'
        404:
          $ref: '#/responses/RecursoNoExiste'
  
  /clients/{id_cliente}/packages/{id_paquete}/accesses/{id_acceso_paquete}/:
    parameters:
      - $ref: '#/parameters/id_cliente'
      - $ref: '#/parameters/id_paquete'
      - $ref: '#/parameters/id_acceso_paquete'
    get:
      description: |
        Obtiene el `AccesoPaquete` activo con id dado del paquete con id `id_paquete` para el cliente con id `id_cliente`
      responses:
        200:
          description: Consulta exitosa
          schema:
            $ref: '#/definitions/AccesoPaquete'
        404:
          $ref: '#/responses/RecursoNoExiste'
    put:
      description: |
        Actualiza el `AccesoPaquete` con los valores dados por parámetro. Si el paquete tiene reservas asociadas se crea una copia del paquete, incluyendo sus `AccesosPaquete`, y se aplican los cambios correspondientes al acceso creado. Ver servicio PUT de `/clients/{id_cliente}/packages/{id_paquete}/`
      parameters:
        - name: AccesoPaquete
          in: body
          required: true
          schema:
            $ref: '#/definitions/AccesoPaquete'
      responses:
        200:
          description: Actualización exitosa
          schema:
            $ref: '#/definitions/AccesoPaquete'
        400:
          $ref: '#/responses/AccesoPaqueteInválido'
        404:
          $ref: '#/responses/RecursoNoExiste' 
  
  /clients/{id_cliente}/packages/{id_paquete}/amount-consumptions/:
    parameters:
      - $ref: '#/parameters/id_cliente'
      - $ref: '#/parameters/id_paquete'
    get:
      description: |
        Obtiene los `ConsumosCantidadPaquete` activos del paquete con id `id_paquete` existentes para el cliente con id `id_cliente`
      responses:
        200:
          description: Consulta exitosa
          schema:
            title: ConsumosCantidadPaquete
            type: array
            items:
              $ref: '#/definitions/ConsumoCantidadPaquete'
        404:
          $ref: '#/responses/RecursoNoExiste'
    post:
      parameters:
        - name: ConsumoCantidadPaquete
          in: body
          required: true
          schema:
            $ref: '#/definitions/ConsumoCantidadPaquete'
      description: |
        Crea un `ConsumoCantidadPaquete` con los valores dados por parámetro para el paquete con id `id_paquete`. Si el paquete tiene reservas asociadas se crea una copia del paquete a la que se le asigna el consumo creado. Ver servicio PUT de `/clients/{id_cliente}/packages/{id_paquete}/`
      responses:
        200:
          description: Creación exitosa
          schema:
            $ref: '#/definitions/ConsumoCantidadPaquete'
        400:
          $ref: '#/responses/ConsumoCantidadPaqueteInválido'
        404:
          $ref: '#/responses/RecursoNoExiste'
  
  /clients/{id_cliente}/packages/{id_paquete}/amount-consumptions/{id_consumo_cantidad_paquete}/:
    parameters:
      - $ref: '#/parameters/id_cliente'
      - $ref: '#/parameters/id_paquete'
      - $ref: '#/parameters/id_consumo_cantidad_paquete'
    get:
      description: |
        Obtiene el `ConsumoCantidadPaquete` activo con id dado del paquete con id `id_paquete` para el cliente con id `id_cliente`
      responses:
        200:
          description: Consulta exitosa
          schema:
            $ref: '#/definitions/ConsumoCantidadPaquete'
        404:
          $ref: '#/responses/RecursoNoExiste'
    put:
      description: |
        Actualiza el `ConsumoCantidadPaquete` con los valores dados por parámetro. Si el paquete tiene reservas asociadas se crea una copia del paquete, incluyendo sus `ConsumosCantidadPaquete`, y se aplican los cambios correspondientes al consumo creado. Ver servicio PUT de `/clients/{id_cliente}/packages/{id_paquete}/`
      parameters:
        - name: ConsumoCantidadPaquete
          in: body
          required: true
          schema:
            $ref: '#/definitions/ConsumoCantidadPaquete'
      responses:
        200:
          description: Actualización exitosa
          schema:
            $ref: '#/definitions/ConsumoCantidadPaquete'
        400:
          $ref: '#/responses/ConsumoCantidadPaqueteInválido'
        404:
          $ref: '#/responses/RecursoNoExiste' 
  
  /clients/{id_cliente}/packages/{id_paquete}/money-consumptions/:
    parameters:
      - $ref: '#/parameters/id_cliente'
      - $ref: '#/parameters/id_paquete'
    get:
      description: |
        Obtiene los `ConsumosDineroPaquete` activos del paquete con id `id_paquete` existentes para el cliente con id `id_cliente`
      responses:
        200:
          description: Consulta exitosa
          schema:
            title: ConsumosDineroPaquete
            type: array
            items:
              $ref: '#/definitions/ConsumoDineroPaquete'
        404:
          $ref: '#/responses/RecursoNoExiste'
    post:
      parameters:
        - name: ConsumoDineroPaquete
          in: body
          required: true
          schema:
            $ref: '#/definitions/ConsumoDineroPaquete'
      description: |
        Crea un `ConsumoDineroPaquete` con los valores dados por parámetro para el paquete con id `id_paquete`. Si el paquete tiene reservas asociadas se crea una copia del paquete a la que se le asigna el consumo creado. Ver servicio PUT de `/clients/{id_cliente}/packages/{id_paquete}/`
      responses:
        200:
          description: Creación exitosa
          schema:
            $ref: '#/definitions/ConsumoDineroPaquete'
        400:
          $ref: '#/responses/ConsumoDineroPaqueteInválido'
        404:
          $ref: '#/responses/RecursoNoExiste'
  
  /clients/{id_cliente}/packages/{id_paquete}/money-consumptions/{id_consumo_dinero_paquete}/:
    parameters:
      - $ref: '#/parameters/id_cliente'
      - $ref: '#/parameters/id_paquete'
      - $ref: '#/parameters/id_consumo_dinero_paquete'
    get:
      description: |
        Obtiene el `ConsumoDineroPaquete` activo con id dado del paquete con id `id_paquete` para el cliente con id `id_cliente`
      responses:
        200:
          description: Consulta exitosa
          schema:
            $ref: '#/definitions/ConsumoDineroPaquete'
        404:
          $ref: '#/responses/RecursoNoExiste'
    put:
      description: |
        Actualiza el `ConsumoDineroPaquete` con los valores dados por parámetro. Si el paquete tiene reservas asociadas se crea una copia del paquete, incluyendo sus `ConsumosDineroPaquete`, y se aplican los cambios correspondientes al consumo creado. Ver servicio PUT de `/clients/{id_cliente}/packages/{id_paquete}/`
      parameters:
        - name: ConsumoDineroPaquete
          in: body
          required: true
          schema:
            $ref: '#/definitions/ConsumoDineroPaquete'
      responses:
        200:
          description: Actualización exitosa
          schema:
            $ref: '#/definitions/ConsumoDineroPaquete'
        400:
          $ref: '#/responses/ConsumoDineroPaqueteInválido'
        404:
          $ref: '#/responses/RecursoNoExiste' 
  
  /clients/{id_cliente}/reservations/:
    parameters:
      - $ref: '#/parameters/id_cliente'
      - $ref: '#/parameters/initial-time'
      - $ref: '#/parameters/final-time'
      - $ref: '#/parameters/include-children'
    get:
      description: |
        Obtiene las `Reservas` del cliente con id `id_cliente`. Si se envía el parámetro `initial-time` solo se incluyen las reservas con fecha final mayor o igual al valor dado. Si se envía el parámetro `final-time` solo se incluyen las reservas con fecha inicial menor o igual al valor dado. Si se envía el parámetro `include-children` en `true` se incluyen todas las entidades hijas de cada reserva en la respuesta y los usuarios que las crearon. En particular se incluyen las reservas persona con su persona, topoffs, ordenes, consumos, activaciones y desactivaciones.
      responses:
        200:
          description: Consulta exitosa
          schema:
            title: Reservas
            type: array
            items:
              $ref: '#/definitions/Reserva'
        400:
          $ref: '#/responses/ParámetrosConsultarReservaInválidos'
        404:
          $ref: '#/responses/RecursoNoExiste'
    post:
      parameters:
        - name: Reserva
          in: body
          required: true
          schema:
            $ref: '#/definitions/Reserva'
      description: |
        Crea una `Reserva` con los valores dados por parámetro para el cliente con id `id_cliente`
      responses:
        200:
          description: Creación exitosa
          schema:
            $ref: '#/definitions/Reserva'
        400:
          $ref: '#/responses/ReservaInválida'
        404:
          $ref: '#/responses/RecursoNoExiste'
  
  /clients/{id_cliente}/reservations/{id_reserva}/:
    parameters:
      - $ref: '#/parameters/id_cliente'
      - $ref: '#/parameters/id_reserva'
    get:
      description: |
        Obtiene la `Reserva` con id dado del cliente con id `id_cliente`
      responses:
        200:
          description: Consulta exitosa
          schema:
            $ref: '#/definitions/Reserva'
        404:
          $ref: '#/responses/RecursoNoExiste'
    put:
      description: |
        Actualiza la `Reserva` con los valores dados por parámetro
      parameters:
        - name: Reserva
          in: body
          required: true
          schema:
            $ref: '#/definitions/Reserva'
      responses:
        200:
          description: Actualización exitosa
          schema:
            $ref: '#/definitions/Reserva'
        400:
          $ref: '#/responses/ReservaInválida'
        404:
          $ref: '#/responses/RecursoNoExiste' 
    patch:
      description: |
       Actualiza el estado de pago de la `Reserva`, campo `transaction-number` y opcionalmente `payment`, con los valores dados por parámetro
      parameters:
        - name: PagoReserva
          in: body
          required: true
          schema:
            $ref: '#/definitions/PagoReserva'
      responses:
        200:
          description: Actualización exitosa
          schema:
            $ref: '#/definitions/Reserva'
        400:
          $ref: '#/responses/ReservaInválida'
        404:
          $ref: '#/responses/RecursoNoExiste' 
    delete:
      description: |
        Elimina la `Reserva` con id dado del cliente con id `id_cliente`. Adicionalmente elimina las `ReservasPersona` hijo correspondientes
      responses:
        200:
          description: Eliminación exitosa
          schema:
            $ref: '#/definitions/Reserva'
        400:
          $ref: '#/responses/ReservaNoSePuedeEliminar'
        404:
          $ref: '#/responses/RecursoNoExiste'
  
  /clients/{id_cliente}/reservations/{id_reserva}/balance/:
    parameters:
      - $ref: '#/parameters/id_cliente'
      - $ref: '#/parameters/id_reserva'
    get:
      description: |
        Obtiene los fondos `BalancesReservaPersona` de la `Reserva` correspondiente
      responses:
        200:
          description: Consulta exitosa
          schema:
            title: BalanceReservaPersona
            type: array
            items:
              $ref: '#/definitions/BalanceReservaPersona'
        404:
          $ref: '#/responses/RecursoNoExiste'
   
  /clients/{id_cliente}/reservation-by-number/:
    parameters:
      - $ref: '#/parameters/id_cliente'
      - $ref: '#/parameters/reservation-number'
    get:
      description: |
        Obtiene la `Reserva` con número de reserva dado para el cliente con id `id_cliente`
      responses:
        200:
          description: Consulta exitosa
          schema:
            $ref: '#/definitions/Reserva'
        400:
          $ref: '#/responses/NúmeroReservaInválido'
        404:
          $ref: '#/responses/RecursoNoExiste'
   
  /clients/{id_cliente}/reservations-by-document/:
    parameters:
      - $ref: '#/parameters/id_cliente'
      - $ref: '#/parameters/document-number'
      - $ref: '#/parameters/document-type'
      - $ref: '#/parameters/base-time'
    get:
      description: |
        Obtiene las `Reservas` de la `Persona` con el documento dado para el cliente con id `id_cliente`. Si se envía el parámetro `base-time` se retornan solo las reservas que tengan al menos una `ReservaPersona` con fecha de finalización superior o igual a `base-time`. Si el cliente tiene servicio externo de reservas con valor de `COMPENSAR` y ninguna de las personas con número de documento dado (se ignora el tipo de documento por la estructura del servicio de Compensar) tiene reservas con fechas posteriores o iguales a `base-time` se consulta el servicio externo de Compensar con el número de documento dado y se crean las reservas correspondientes
      responses:
        200:
          description: Consulta exitosa
          schema:
            title: Reservas
            type: array
            items:
              $ref: '#/definitions/Reserva'
        400:
          $ref: '#/responses/DocumentoDePersonaInválidoParaReserva'
        404:
          $ref: '#/responses/RecursoNoExiste'
  
  /clients/{id_cliente}/reservations/{id_reserva}/persons-reservations/:
    parameters:
      - $ref: '#/parameters/id_cliente'
      - $ref: '#/parameters/id_reserva'
    post:
      parameters:
        - name: ReservaPersona
          in: body
          required: true
          schema:
            $ref: '#/definitions/ReservaPersona'
      description: |
        Crea una `ReservaPersona` con los valores dados por parámetro para la reserva con id `id_reserva`
      responses:
        200:
          description: Creación exitosa
          schema:
            $ref: '#/definitions/ReservaPersona'
        400:
          $ref: '#/responses/ReservaPersonaInválida'
        404:
          $ref: '#/responses/RecursoNoExiste'
    get:
      description: |
        Obtiene las `ReservasPersona` de la reserva con id `id_reserva` para el cliente con id `id_cliente`
      responses:
        200:
          description: Consulta exitosa
          schema:
            title: ReservasPersona
            type: array
            items:
              $ref: '#/definitions/ReservaPersona'
        404:
          $ref: '#/responses/RecursoNoExiste'
  
  /clients/{id_cliente}/reservations/{id_reserva}/persons-reservations/{id_reserva_persona}/:
    parameters:
      - $ref: '#/parameters/id_cliente'
      - $ref: '#/parameters/id_reserva'
      - $ref: '#/parameters/id_reserva_persona'
    get:
      description: |
        Obtiene la `ReservaPersona` con id dado
      responses:
        200:
          description: Consulta exitosa
          schema:
            $ref: '#/definitions/ReservaPersona'
        404:
          $ref: '#/responses/RecursoNoExiste'
    put:
      description: |
        Actualiza la `ReservaPersona` con los valores dados por parámetro
      parameters:
        - name: ReservaPersona
          in: body
          required: true
          schema:
            $ref: '#/definitions/ReservaPersona'
      responses:
        200:
          description: Actualización exitosa
          schema:
            $ref: '#/definitions/ReservaPersona'
        400:
          $ref: '#/responses/ReservaPersonaInválida'
        404:
          $ref: '#/responses/RecursoNoExiste' 
    patch:
      description: |
       Actualiza el estado de activación de la `ReservaPersona`, campo `active`, con los valores dados por parámetro
      parameters:
        - name: ActivaciónReservaPersona
          in: body
          required: true
          schema:
            $ref: '#/definitions/ActivaciónReservaPersona'
      responses:
        200:
          description: Actualización exitosa
          schema:
            $ref: '#/definitions/ReservaPersona'
        400:
          $ref: '#/responses/ReservaPersonaInválida'
        404:
          $ref: '#/responses/RecursoNoExiste' 
    delete:
      description: |
        Elimina la `ReservaPersona` correspondiente. No permite eliminar las `ReservaPersona` del titular de la `Reserva`. Ver campo `is-holder` de `ReservaPersona`
      responses:
        200:
          description: Eliminación exitosa
          schema:
            $ref: '#/definitions/ReservaPersona'
        400:
          $ref: '#/responses/ReservaPersonaNoSePuedeEliminar'
        404:
          $ref: '#/responses/RecursoNoExiste'
   
  /clients/{id_cliente}/persons-reservations-by-document/:
    parameters:
      - $ref: '#/parameters/id_cliente'
      - $ref: '#/parameters/document-number'
      - $ref: '#/parameters/document-type'
      - $ref: '#/parameters/base-time'
    get:
      description: |
        Obtiene las `ReservasPersona` de la `Persona` con el documento dado para el cliente con id `id_cliente`. Si se envía el parámetro `base-time` se retornan solo las reservas persona que tengan fecha de finalización superior o igual a `base-time`. Si el cliente tiene servicio externo de reservas con valor de `COMPENSAR` y ninguna de las personas con número de documento dado (se ignora el tipo de documento por la estructura del servicio de Compensar) tiene reservas con fechas posteriores o iguales a `base-time` se consulta el servicio externo de Compensar con el número de documento dado y se crean las reservas correspondientes
      responses:
        200:
          description: Consulta exitosa
          schema:
            title: ReservasPersona
            type: array
            items:
              $ref: '#/definitions/ReservaPersona'
        400:
          $ref: '#/responses/DocumentoDePersonaInválidoParaReservaPersona'
        404:
          $ref: '#/responses/RecursoNoExiste'
  
  /clients/{id_cliente}/reservations/{id_reserva}/persons-reservations/{id_reserva_persona}/available-funds/:
    parameters:
      - $ref: '#/parameters/id_cliente'
      - $ref: '#/parameters/id_reserva'
      - $ref: '#/parameters/id_reserva_persona'
    get:
      description: |
        Obtiene los fondos `FondosDisponiblesReservaPersona` de la `ReservaPersona` correspondiente
      responses:
        200:
          description: Consulta exitosa
          schema:
            title: ListaFondosDisponiblesReservaPersona
            type: array
            items:
              $ref: '#/definitions/FondosDisponiblesReservaPersona'
        404:
          $ref: '#/responses/RecursoNoExiste'
  
  /clients/{id_cliente}/reservations/{id_reserva}/persons-reservations/{id_reserva_persona}/balance/:
    parameters:
      - $ref: '#/parameters/id_cliente'
      - $ref: '#/parameters/id_reserva'
      - $ref: '#/parameters/id_reserva_persona'
    get:
      description: |
        Obtiene los fondos `SaldosFondo` de la `ReservaPersona` correspondiente
      responses:
        200:
          description: Consulta exitosa
          schema:
            title: SaldosFondo
            type: array
            items:
              $ref: '#/definitions/SaldoFondo'
        404:
          $ref: '#/responses/RecursoNoExiste'
  
  /clients/{id_cliente}/access-topoffs/:
    parameters:
      - $ref: '#/parameters/id_cliente'
    get:
      description: |
        Obtiene los `TopoffsDeAcceso` del cliente correspondiente
      responses:
        200:
          description: Consulta exitosa
          schema:
            title: TopoffsDeAcceso
            type: array
            items:
              $ref: '#/definitions/TopoffDeAcceso'
        404:
          $ref: '#/responses/RecursoNoExiste'
    post:
      parameters:
        - name: TopoffsDeAcceso
          in: body
          required: true
          schema:
            $ref: '#/definitions/ListaTopoffsDeAcceso'
      description: |
        Crea los `TopoffsDeAcceso` con los valores dados por parámetro para las reservas de persona correspondientes
      responses:
        200:
          description: Creación exitosa
          schema:
            title: TopoffsDeAcceso
            type: array
            items:
              $ref: '#/definitions/TopoffDeAcceso'
        400:
          $ref: '#/responses/TopoffDeAccesoInválido'
        404:
          $ref: '#/responses/RecursoNoExiste'
  
  /clients/{id_cliente}/reservations/{id_reserva}/persons-reservations/{id_reserva_persona}/access-topoffs/:
    parameters:
      - $ref: '#/parameters/id_cliente'
      - $ref: '#/parameters/id_reserva'
      - $ref: '#/parameters/id_reserva_persona'
    get:
      description: |
        Obtiene los `TopoffsDeAcceso` de la `ReservaPersona` correspondiente
      responses:
        200:
          description: Consulta exitosa
          schema:
            title: TopoffsDeAcceso
            type: array
            items:
              $ref: '#/definitions/TopoffDeAcceso'
        404:
          $ref: '#/responses/RecursoNoExiste'
  
  /clients/{id_cliente}/reservations/{id_reserva}/persons-reservations/{id_reserva_persona}/access-topoffs/{id_topoff_acceso}/:
    parameters:
      - $ref: '#/parameters/id_cliente'
      - $ref: '#/parameters/id_reserva'
      - $ref: '#/parameters/id_reserva_persona'
      - $ref: '#/parameters/id_topoff_acceso'
    get:
      description: |
        Obtiene el `TopoffDeAcceso` con id dado
      responses:
        200:
          description: Consulta exitosa
          schema:
            $ref: '#/definitions/TopoffDeAcceso'
        404:
          $ref: '#/responses/RecursoNoExiste'
    delete:
      description: |
        Elimina el `TopoffDeAcceso` correspondiente
      responses:
        200:
          description: Eliminación exitosa
          schema:
            $ref: '#/definitions/TopoffDeAcceso'
        404:
          $ref: '#/responses/RecursoNoExiste'
  
  /clients/{id_cliente}/amount-topoffs/:
    parameters:
      - $ref: '#/parameters/id_cliente'
    get:
      description: |
        Obtiene los `TopoffsPorCantidad` del cliente correspondiente
      responses:
        200:
          description: Consulta exitosa
          schema:
            title: TopoffsPorCantidad
            type: array
            items:
              $ref: '#/definitions/TopoffPorCantidad'
        404:
          $ref: '#/responses/RecursoNoExiste'
    post:
      parameters:
        - name: TopoffsPorCantidad
          in: body
          required: true
          schema:
            $ref: '#/definitions/ListaTopoffsPorCantidad'
      description: |
        Crea los `TopoffsPorCantidad` con los valores dados por parámetro para las reservas de persona correspondientes
      responses:
        200:
          description: Creación exitosa
          schema:
            title: TopoffsPorCantidad
            type: array
            items:
              $ref: '#/definitions/TopoffPorCantidad'
        400:
          $ref: '#/responses/TopoffPorCantidadInválido'
        404:
          $ref: '#/responses/RecursoNoExiste'
  
  /clients/{id_cliente}/reservations/{id_reserva}/persons-reservations/{id_reserva_persona}/amount-topoffs/:
    parameters:
      - $ref: '#/parameters/id_cliente'
      - $ref: '#/parameters/id_reserva'
      - $ref: '#/parameters/id_reserva_persona'
    get:
      description: |
        Obtiene los `TopoffsPorCantidad` de la `ReservaPersona` correspondiente
      responses:
        200:
          description: Consulta exitosa
          schema:
            title: TopoffsPorCantidad
            type: array
            items:
              $ref: '#/definitions/TopoffPorCantidad'
        404:
          $ref: '#/responses/RecursoNoExiste'
  
  /clients/{id_cliente}/reservations/{id_reserva}/persons-reservations/{id_reserva_persona}/amount-topoffs/{id_topoff_cantidad}/:
    parameters:
      - $ref: '#/parameters/id_cliente'
      - $ref: '#/parameters/id_reserva'
      - $ref: '#/parameters/id_reserva_persona'
      - $ref: '#/parameters/id_topoff_cantidad'
    get:
      description: |
        Obtiene el `TopoffPorCantidad` con id dado
      responses:
        200:
          description: Consulta exitosa
          schema:
            $ref: '#/definitions/TopoffPorCantidad'
        404:
          $ref: '#/responses/RecursoNoExiste'
    delete:
      description: |
        Elimina el `TopoffPorCantidad` correspondiente
      responses:
        200:
          description: Eliminación exitosa
          schema:
            $ref: '#/definitions/TopoffPorCantidad'
        404:
          $ref: '#/responses/RecursoNoExiste'
  
  /clients/{id_cliente}/money-topoffs/:
    parameters:
      - $ref: '#/parameters/id_cliente'
    get:
      description: |
        Obtiene los `TopoffsPorDinero` del cliente correspondiente
      responses:
        200:
          description: Consulta exitosa
          schema:
            title: TopoffsPorDinero
            type: array
            items:
              $ref: '#/definitions/TopoffPorDinero'
        404:
          $ref: '#/responses/RecursoNoExiste'
    post:
      parameters:
        - name: TopoffsPorDinero
          in: body
          required: true
          schema:
            $ref: '#/definitions/ListaTopoffsPorDinero'
      description: |
        Crea los `TopoffPorDinero` con los valores dados por parámetro para las reservas de persona correspondientes
      responses:
        200:
          description: Creación exitosa
          schema:
            title: TopoffsPorDinero
            type: array
            items:
              $ref: '#/definitions/TopoffPorDinero'
        400:
          $ref: '#/responses/TopoffPorDineroInválido'
        404:
          $ref: '#/responses/RecursoNoExiste'
  
  /clients/{id_cliente}/reservations/{id_reserva}/persons-reservations/{id_reserva_persona}/money-topoffs/:
    parameters:
      - $ref: '#/parameters/id_cliente'
      - $ref: '#/parameters/id_reserva'
      - $ref: '#/parameters/id_reserva_persona'
    get:
      description: |
        Obtiene los `TopoffsPorDinero` de la `ReservaPersona` correspondiente
      responses:
        200:
          description: Consulta exitosa
          schema:
            title: TopoffsPorDinero
            type: array
            items:
              $ref: '#/definitions/TopoffPorDinero'
        404:
          $ref: '#/responses/RecursoNoExiste'
  
  /clients/{id_cliente}/reservations/{id_reserva}/persons-reservations/{id_reserva_persona}/money-topoffs/{id_topoff_dinero}/:
    parameters:
      - $ref: '#/parameters/id_cliente'
      - $ref: '#/parameters/id_reserva'
      - $ref: '#/parameters/id_reserva_persona'
      - $ref: '#/parameters/id_topoff_dinero'
    get:
      description: |
        Obtiene el `TopoffPorDinero` con id dado
      responses:
        200:
          description: Consulta exitosa
          schema:
            $ref: '#/definitions/TopoffPorDinero'
        404:
          $ref: '#/responses/RecursoNoExiste'
    delete:
      description: |
        Elimina el `TopoffPorDinero` correspondiente
      responses:
        200:
          description: Eliminación exitosa
          schema:
            $ref: '#/definitions/TopoffPorDinero'
        404:
          $ref: '#/responses/RecursoNoExiste'
  
  /clients/{id_cliente}/person-accesses/:
    parameters:
      - $ref: '#/parameters/id_cliente'
    post:
      parameters:
        - name: AccesosPersona
          in: body
          required: true
          schema:
            $ref: '#/definitions/ListaAccesosPersona'
      description: |
        Crea los `AccesosPersona` con los valores dados por parámetro para las reservas de persona correspondientes y crea un evento `Visita` por cada `AccesoPersona` con los datos correspondientes para la persona asociada a cada reserva
      responses:
        200:
          description: Creación exitosa
          schema:
            title: AccesosPersona
            type: array
            items:
              $ref: '#/definitions/AccesoPersona'
        400:
          $ref: '#/responses/AccesoPersonaInválido'
        404:
          $ref: '#/responses/RecursoNoExiste'
    get:
      description: |
        Obtiene los `AccesosPersona` del cliente correspondiente
      responses:
        200:
          description: Consulta exitosa
          schema:
            title: AccesosPersona
            type: array
            items:
              $ref: '#/definitions/AccesoPersona'
        404:
          $ref: '#/responses/RecursoNoExiste'
  
  /clients/{id_cliente}/reservations/{id_reserva}/persons-reservations/{id_reserva_persona}/person-accesses/:
    parameters:
      - $ref: '#/parameters/id_cliente'
      - $ref: '#/parameters/id_reserva'
      - $ref: '#/parameters/id_reserva_persona'
    get:
      description: |
        Obtiene los `AccesosPersona` de la `ReservaPersona` correspondiente
      responses:
        200:
          description: Consulta exitosa
          schema:
            title: AccesosPersona
            type: array
            items:
              $ref: '#/definitions/AccesoPersona'
        404:
          $ref: '#/responses/RecursoNoExiste'
  
  /clients/{id_cliente}/reservations/{id_reserva}/persons-reservations/{id_reserva_persona}/person-accesses/{id_acceso_persona}/:
    parameters:
      - $ref: '#/parameters/id_cliente'
      - $ref: '#/parameters/id_reserva'
      - $ref: '#/parameters/id_reserva_persona'
      - $ref: '#/parameters/id_acceso_persona'
    get:
      description: |
        Obtiene el `AccesoPersona` con id dado
      responses:
        200:
          description: Consulta exitosa
          schema:
            $ref: '#/definitions/AccesoPersona'
        404:
          $ref: '#/responses/RecursoNoExiste'
    delete:
      description: |
        Elimina el `AccesoPersona` correspondiente y crea un evento `Devolución` con los datos correspondientes para la persona asociada a la reserva
      responses:
        200:
          description: Eliminación exitosa
          schema:
            $ref: '#/definitions/AccesoPersona'
        404:
          $ref: '#/responses/RecursoNoExiste'
  
  /clients/{id_cliente}/person-amount-consumptions/:
    parameters:
      - $ref: '#/parameters/id_cliente'
    get:
      description: |
        Obtiene los `ConsumosCantidadPersona` del cliente correspondiente
      responses:
        200:
          description: Consulta exitosa
          schema:
            title: ConsumosCantidadPersona
            type: array
            items:
              $ref: '#/definitions/ConsumoCantidadPersona'
        404:
          $ref: '#/responses/RecursoNoExiste'
  
  /clients/{id_cliente}/reservations/{id_reserva}/persons-reservations/{id_reserva_persona}/person-amount-consumptions/:
    parameters:
      - $ref: '#/parameters/id_cliente'
      - $ref: '#/parameters/id_reserva'
      - $ref: '#/parameters/id_reserva_persona'
    get:
      description: |
        Obtiene los `ConsumosCantidadPersona` de la `ReservaPersona` correspondiente
      responses:
        200:
          description: Consulta exitosa
          schema:
            title: ConsumosCantidadPersona
            type: array
            items:
              $ref: '#/definitions/ConsumoCantidadPersona'
        404:
          $ref: '#/responses/RecursoNoExiste'
  
  /clients/{id_cliente}/person-orders/:
    parameters:
      - $ref: '#/parameters/id_cliente'
    get:
      description: |
        Obtiene las `OrdenesPersona` del cliente correspondiente
      responses:
        200:
          description: Consulta exitosa
          schema:
            title: OrdenesPersona
            type: array
            items:
              $ref: '#/definitions/OrdenPersona'
        404:
          $ref: '#/responses/RecursoNoExiste'
    post:
      parameters:
        - name: OrdenesPersona
          in: body
          required: true
          schema:
            $ref: '#/definitions/ListaOrdenesPersona'
      description: |
        Crea las `OrdenesPersona` con los valores dados por parámetro para las reservas de persona correspondientes y crea un evento `Orden` por cada `OrdenPersona` con los datos correspondientes para la persona asociada a cada reserva
      responses:
        200:
          description: Creación exitosa
          schema:
            title: OrdenesPersona
            type: array
            items:
              $ref: '#/definitions/OrdenPersona'
        400:
          $ref: '#/responses/ListaOrdenesPersonaInválida'
        404:
          $ref: '#/responses/RecursoNoExiste'
  
  /clients/{id_cliente}/reservations/{id_reserva}/persons-reservations/{id_reserva_persona}/person-orders/:
    parameters:
      - $ref: '#/parameters/id_cliente'
      - $ref: '#/parameters/id_reserva'
      - $ref: '#/parameters/id_reserva_persona'
    get:
      description: |
        Obtiene las `OrdenesPersona` de la `ReservaPersona` correspondiente
      responses:
        200:
          description: Consulta exitosa
          schema:
            title: OrdenesPersona
            type: array
            items:
              $ref: '#/definitions/OrdenPersona'
        404:
          $ref: '#/responses/RecursoNoExiste'
  
  /clients/{id_cliente}/reservations/{id_reserva}/persons-reservations/{id_reserva_persona}/person-orders/{id_orden_persona}/:
    parameters:
      - $ref: '#/parameters/id_cliente'
      - $ref: '#/parameters/id_reserva'
      - $ref: '#/parameters/id_reserva_persona'
      - $ref: '#/parameters/id_orden_persona'
    get:
      description: |
        Obtiene la `OrdenPersona` con id dado
      responses:
        200:
          description: Consulta exitosa
          schema:
            $ref: '#/definitions/OrdenPersona'
        404:
          $ref: '#/responses/RecursoNoExiste'
    delete:
      description: |
        Elimina la `OrdenPersona` correspondiente y crea un evento `Devolución` con los datos correspondientes para la persona asociada a la reserva
      responses:
        200:
          description: Eliminación exitosa
          schema:
            $ref: '#/definitions/OrdenPersona'
        404:
          $ref: '#/responses/RecursoNoExiste'
  
  /clients/{id_cliente}/person-money-consumptions/:
    parameters:
      - $ref: '#/parameters/id_cliente'
    get:
      description: |
        Obtiene los `ConsumosDineroPersona` del cliente correspondiente
      responses:
        200:
          description: Consulta exitosa
          schema:
            title: ConsumosDineroPersona
            type: array
            items:
              $ref: '#/definitions/ConsumoDineroPersona'
        404:
          $ref: '#/responses/RecursoNoExiste'
  
  /clients/{id_cliente}/reservations/{id_reserva}/persons-reservations/{id_reserva_persona}/person-money-consumptions/:
    parameters:
      - $ref: '#/parameters/id_cliente'
      - $ref: '#/parameters/id_reserva'
      - $ref: '#/parameters/id_reserva_persona'
    get:
      description: |
        Obtiene los `ConsumosDineroPersona` de la `ReservaPersona` correspondiente
      responses:
        200:
          description: Consulta exitosa
          schema:
            title: ConsumosDineroPersona
            type: array
            items:
              $ref: '#/definitions/ConsumoDineroPersona'
        404:
          $ref: '#/responses/RecursoNoExiste'
  
  
responses:
  RecursoNoExiste:
    description: |
            El recurso con id dado no existe
    schema:
      $ref: '#/definitions/Error'
    examples: 
      application/json:
        - message: 'The entity (Client[{id_cliente}]) does not exists.'
          internal-code: 1
        - message: 'The entity (LocationTag[{name}]) does not exists.'
          internal-code: 2
        - message: 'The entity (Location[{id_ubicación}]) does not exists.'
          internal-code: 3
        - message: 'The entity (Location Image[{id_ubicación}]) does not exists.'
          internal-code: 4
        - message: 'Could not find the field {nombre_campo}.'
          internal-code: 5
        - message: 'The entity (User[{username}]) does not exists.'
          internal-code: 6
        - message: 'The entity (Currency[{id_moneda}]) does not exists.'
          internal-code: 7
        - message: 'The entity (SKU Category[{id_categoría_sku}]) does not exists.'
          internal-code: 8
        - message: 'The entity (SKU[{id_sku}]) does not exists.'
          internal-code: 9
        - message: 'The entity (SKU Image[{id_sku}]) does not exists.'
          internal-code: 10
        - message: 'The entity (Sale location[{id_ubicación}]) does not exists.'
          internal-code: 11
        - message: 'The entity (Sku On Sale[{id_sku}]) does not exists.'
          internal-code: 12
        - message: 'The entity (Person[{id_persona}]) does not exists.'
          internal-code: 13
        - message: 'The entity (Person Image[{id_persona}]) does not exists.'
          internal-code: 14
        - message: 'The entity (Social Event[{id_persona}]) does not exists.'
          internal-code: 15
        - message: 'The entity (Package[{id_paquete}]) does not exists.'
          internal-code: 16
        - message: 'The entity (Access[{id_acceso_paquete}]) does not exists.'
          internal-code: 17
        - message: 'The entity (Amount Consumption[{id_consumo_cantidad_paquete}]) does not exists.'
          internal-code: 18
        - message: 'The entity (Money Consumption[{id_consumo_dinero_paquete}]) does not exists.'
          internal-code: 19
        - message: 'The entity (Reservation[{id_reserva}]) does not exists.'
          internal-code: 20
        - message: 'The entity (Person Reservation[{id_reserva_persona}]) does not exists.'
          internal-code: 21
        - message: 'The entity (Access topoff[{id_topoff_acceso}]) does not exists.'
          internal-code: 22
        - message: 'The entity (Amount topoff[{id_topoff_cantidad}]) does not exists.'
          internal-code: 23
        - message: 'The entity (Money topoff[{id_topoff_dinero}]) does not exists.'
          internal-code: 24
        - message: 'The entity (Person Access[{id_acceso_persona}]) does not exists.'
          internal-code: 25
        - message: 'The entity (Person Consumption[{id_consumo_persona}]) does not exists.'
          internal-code: 26
        - message: 'The entity (Supported Tag[{id_tag_soportado}]) does not exists.'
          internal-code: 27
        - message: 'The entity (Client Tag[{id_tag_cliente}]) does not exists.'
          internal-code: 28
        - message: 'The entity (Order[{id_orden}]) does not exists.'
          internal-code: 29
        - message: 'The entity (Global Sensor[{id_sensor}]) does not exists.'
          internal-code: 31
        - message: 'The entity (Client Sensor[{id_sensor}]) does not exists.'
          internal-code: 32
        - message: 'The entity (Person Relationship) does not exists.'
          internal-code: 33
        - message: 'The entity (Price Rule[{id_regla_precio_paquete}) does not exists.'
          internal-code: 34
        
        
  ClienteInválido:
    description: |
            Los parámetros dados no representan un `Cliente` válido
    schema:
      $ref: '#/definitions/Error'
    examples: 
      application/json:
        - message: 'The value of field name can not be empty.'
          internal-code: 101
        - message: 'The value of field requires-login can not be empty.'
          internal-code: 102
        - message: 'The value of field external-person-service can not be empty.'
          internal-code: 103
        - message: 'The value of field external-reservations-service can not be empty.'
          internal-code: 104
        
  TagUbicaciónInválido:
    description: |
            Los parámetros dados no representan un `TagUbicación` válido
    schema:
      $ref: '#/definitions/Error'
    examples: 
      application/json:
        - message: 'The value of field name can not be empty.'
          internal-code: 201
        - message: 'The tag {name} already exists.'
          internal-code: 202
        
  UbicaciónInválida:
    description: |
            Los parámetros dados no representan una `Ubicación` válida
    schema:
      $ref: '#/definitions/Error'
    examples: 
      application/json:
        - message: 'The value of field name can not be empty.'
          internal-code: 301
        - type: 'Invalid location type for field type, expected one of the following values {VALID_TYPES}.'
          internal-code: 302
        - message: 'The value of field active can not be empty.'
          internal-code: 303
        - message: 'The value of field description can not be empty.'
          internal-code: 304
        - message: 'The value of field web can not be empty.'
          internal-code: 305
        - message: 'The value of field phone can not be empty.'
          internal-code: 306
        - message: 'The value of field address can not be empty.'
          internal-code: 307
        - message: 'The value of field mail can not be empty.'
          internal-code: 308
        - message: 'Invalid location subtype for field subtype, expected one of the following values {VALID_SUBTYPES}'
          internal-code: 309
        - message: 'The value of field latitude can not be empty.'
          internal-code: 310
        - message: 'The value of field longitude can not be empty.'
          internal-code: 311
        - message: 'The entity (Location Image[{id_ubicación}]) already exists.'
          internal-code: 312
        - message: 'Can not add a location of type {type} as child of a location of type {parent.type}".'
          internal-code: 313
        - message: 'Can not change the parent of location {id} to {id-parent-location} because it creates a cicle on the hirearchy'
          internal-code: 314
        
  TipoUbicaciónInválida:
    description: |
            Los parámetros dados no representan un tipo de `Ubicación` válido
    schema:
      $ref: '#/definitions/Error'
    examples: 
      application/json:
        - type: 'Invalid location type for field type, expected one of the following values {VALID_TYPES}.'
          internal-code: 302
        
  ImagenInválida:
    description: |
            Los parámetros dados no representan una `Imagen` válida
    schema:
      $ref: '#/definitions/Error'
    examples: 
      application/json:
        - message: 'The entity (Location Image[{id_ubicación}]) already exists.'
          internal-code: 312
        - message: 'The entity (SKU Image[{id_sku}]) already exists.'
          internal-code: 805
        - message: 'The entity (Person Image[{id_persona}]) already exists.'
          internal-code: 1115
          
        
  OpcionalidadInválida:
    description: |
            Los parámetros dados no representan una `Opcionalidad` válida
    schema:
      $ref: '#/definitions/Error'
    examples: 
      application/json:
        - message: 'Expected a list or null for field applicable-types.'
          internal-code: 401
        - message: 'The value of field optionality can not be empty.'
          internal-code: 402
        - message: 'The value of field default-value can not be empty.'
          internal-code: 403
        - message: 'The optionality of field {field} can not be changed.'
          internal-code: 404
        
  UsuarioInválido:
    description: |
            Los parámetros dados no representan un `Usuario` válido
    schema:
      $ref: '#/definitions/Error'
    examples: 
      application/json:
        - message: 'The value of field username can not be empty.'
          internal-code: 501
        - message: 'The value of field password can not be empty.'
          internal-code: 502
        - message: 'The value of field role can not be empty.'
          internal-code: 503
        - message: 'The entity (User[{username}]) already exists.'
          internal-code: 504
        
  MonedaInválida:
    description: |
            Los parámetros dados no representan una `Moneda` válida
    schema:
      $ref: '#/definitions/Error'
    examples: 
      application/json:
        - message: 'The value of field name can not be empty.'
          internal-code: 601
        - message: 'The entity (Currency[{name}]) already exists.'
          internal-code: 602
        
  CategoríaSKUInválida:
    description: |
            Los parámetros dados no representan una `CategoríaSKU` válida
    schema:
      $ref: '#/definitions/Error'
    examples: 
      application/json:
        - message: 'The value of field name can not be empty.'
          internal-code: 701
        - message: 'Can not change the parent of category {id} to {id-parent-category} because it creates a cicle on the hirearchy'
          internal-code: 702
        
  SKUInválido:
    description: |
            Los parámetros dados no representan un `SKU` válido
    schema:
      $ref: '#/definitions/Error'
    examples: 
      application/json:
        - message: 'The value of field name can not be empty.'
          internal-code: 801
        - message: 'The value of field measure can not be empty.'
          internal-code: 802
        - message: 'The value of field cost can not be empty.'
          internal-code: 803
        - message: 'The value of field ean-code can not be empty.'
          internal-code: 804
        - message: 'The entity (SKU Image[{id_sku}]) already exists.'
          internal-code: 805
        - message: 'The value of field tax-rate can not be empty.'
          internal-code: 806
        - message: 'The value of field external-code can not be empty.'
          internal-code: 807
        
  UbicaciónVentaSKUInválida:
    description: |
            Los parámetros dados no representan una `UbicaciónVentaSKU` válida
    schema:
      $ref: '#/definitions/Error'
    examples: 
      application/json:
        - message: 'The value of field price can not be empty.'
          internal-code: 901
        - message: 'The entity (Sale location[{id_ubicación}]) already exists.'
          internal-code: 902
        
  SKUenVentaInválido:
    description: |
            Los parámetros dados no representan un `SKUenVenta` válido
    schema:
      $ref: '#/definitions/Error'
    examples: 
      application/json:
        - message: 'The value of field price can not be empty.'
          internal-code: 1001
        - message: 'The entity (Sku On Sale[{id_sku}]) already exists.'
          internal-code: 1002
        
  PersonaInválida:
    description: |
            Los parámetros dados no representan una `Persona` válida
    schema:
      $ref: '#/definitions/Error'
    examples: 
      application/json:
        - message: 'The value of field city can not be empty.'
          internal-code: 1101
        - message: 'The value of field company can not be empty.'
          internal-code: 1102
        - message: 'The value of field profession can not be empty.'
          internal-code: 1103
        - message: 'The value of field nationality can not be empty.'
          internal-code: 1104
        - message: 'The value of field affiliation can not be empty.'
          internal-code: 1105
        - message: 'The value of field category can not be empty.'
          internal-code: 1106
        - message: 'The value of field mail can not be empty.'
          internal-code: 1108
        - message: 'The value of field first-name can not be empty.'
          internal-code: 1109
        - message: 'The value of field last-name can not be empty.'
          internal-code: 1110
        - message: 'The value of field document-type can not be empty.'
          internal-code: 1111
        - message: 'The value of field document-number can not be empty.'
          internal-code: 1112
        - message: 'The value of field gender can not be empty.'
          internal-code: 1113
        - message: 'The value of field birthdate can not be empty.'
          internal-code: 1114
        - message: 'The entity (Person Image[{id_persona}]) already exists.'
          internal-code: 1115
        - message: 'The entity (Person[document-type={document-type}, document-number={document-number}]) already exists.'
          internal-code: 1116
        
  DocumentoDePersonaInválidoParaPersona:
    description: |
            Los parámetros dados no representan un documento de `Persona` válido
    schema:
      $ref: '#/definitions/Error'
    examples: 
      application/json:
        - message: 'The value of field document-type can not be empty.'
          internal-code: 1111
        - message: 'The value of field document-number can not be empty.'
          internal-code: 1112
        
  EventoSocialInválido:
    description: |
            Los parámetros dados no representan un `EventoSocial` válido
    schema:
      $ref: '#/definitions/Error'
    examples: 
      application/json:
        - message: 'The value of field name can not be empty.'
          internal-code: 1202
        - message: 'The value of field description can not be empty.'
          internal-code: 1203
        - message: 'The value of field initial-date can not be empty.'
          internal-code: 1204
        - message: 'The value of field final-date can not be empty.'
          internal-code: 1205
        - message: 'The value of final-date [{final-date}] should be greater or equals than the value of initial-date [{initial-date}].'
          internal-code: 1206
        - message: 'The value of field company can not be empty.'
          internal-code: 1207
        - message: 'The value of field document-number can not be empty.'
          internal-code: 1208
        - message: 'The value of field document-type can not be empty.'
          internal-code: 1209
        
  PaqueteInválido:
    description: |
            Los parámetros dados no representan un `Paquete` válido
    schema:
      $ref: '#/definitions/Error'
    examples: 
      application/json:
        - message: 'The value of field name can not be empty.'
          internal-code: 1301
        - message: 'The value of field base-price can not be empty.'
          internal-code: 1302
        - message: 'The value of field description can not be empty.'
          internal-code: 1303
        - message: 'The value of field restricted-consumption can not be empty.'
          internal-code: 1304
        - message: 'The value of field valid-from can not be empty.'
          internal-code: 1305
        - message: 'The value of field valid-through can not be empty.'
          internal-code: 1306
        - message: 'The value of field duration can not be empty.'
          internal-code: 1307
        - message: 'The value of valid-through [{valid-through}] should be greater or equals than the value of valid-from [{valid-from}].'
          internal-code: 1308
        - message: 'The value of field tax-rate can not be empty.'
          internal-code: 1311
        - message: 'The value of field external-code can not be empty.'
          internal-code: 1312
        - message: 'The value of field available-for-sale can not be empty.'
          internal-code: 1313
        
  AccesoPaqueteInválido:
    description: |
            Los parámetros dados no representan un `AccesoPaquete` válido
    schema:
      $ref: '#/definitions/Error'
    examples: 
      application/json:
        - message: 'The value of field amount-included can not be empty.'
          internal-code: 1401
        
  ConsumoCantidadPaqueteInválido:
    description: |
            Los parámetros dados no representan un `ConsumoCantidadPaquete` válido
    schema:
      $ref: '#/definitions/Error'
    examples: 
      application/json:
        - message: 'The fields id-sku and id-sku-category are exclusive.'
          internal-code: 1501
        - message: 'Expected one of the  following fields: [id-sku, id-sku-category].'
          internal-code: 1502
        - message: 'The value of field amount-included can not be empty.'
          internal-code: 1503
        
  ConsumoDineroPaqueteInválido:
    description: |
            Los parámetros dados no representan un `ConsumoDineroPaquete` válido
    schema:
      $ref: '#/definitions/Error'
    examples: 
      application/json:
        - message: 'The value of field money-included can not be empty.'
          internal-code: 1601
        
  ReservaInválida:
    description: |
            Los parámetros dados no representan una `Reserva` válida
    schema:
      $ref: '#/definitions/Error'
    examples: 
      application/json:
        - message: 'The value of field payment can not be empty.'
          internal-code: 1703
        - message: 'The value of field transaction-number can not be empty.'
          internal-code: 1710
        - message: 'The value of field payment can not be empty when the field transaction-number is not.'
          internal-code: 1711
        - message: 'Can not change an active person reservation.'
          internal-code: 1714
        - message: 'Can not change a person reservation with consumed accesses.'
          internal-code: 1715
        - message: 'Can not change a person reservation with consumed consumptions.'
          internal-code: 1716
        - message: 'Can not change a person reservation with topoffs.'
          internal-code: 1717
        
  ReservaNoSePuedeEliminar:
    description: |
            No es posible eliminar la `Reserva`
    schema:
      $ref: '#/definitions/Error'
    examples: 
      application/json:
        - message: 'Can not change an active person reservation.'
          internal-code: 1801
        - message: 'Can not change a person reservation with consumed accesses.'
          internal-code: 1802
        - message: 'Can not change a person reservation with consumed consumptions.'
          internal-code: 1803
        - message: 'Can not change a person reservation with topoffs.'
          internal-code: 1804
        
  NúmeroReservaInválido:
    description: |
            El número de reserva dado no esta en el formato correcto
    schema:
      $ref: '#/definitions/Error'
    examples: 
      application/json:
        - message: 'The value of field reservation-number can not be empty.'
          internal-code: 1901
        
  DocumentoDePersonaInválidoParaReserva:
    description: |
            Los parámetros dados no representan un documento de `Persona` válido o la fecha base esta en formato inválido
    schema:
      $ref: '#/definitions/Error'
    examples: 
      application/json:
        - message: 'The value of field document-type can not be empty.'
          internal-code: 2001
        - message: 'The value of field document-number can not be empty.'
          internal-code: 2002
        - message: 'The value of field base-time can not be empty.'
          internal-code: 2003
        - message: 'Error querying external service.'
          internal-code: 5001
        
  ParámetrosConsultarReservaInválidos:
    description: |
            Los parámetros dados para consultar las reservas son inválidos
    schema:
      $ref: '#/definitions/Error'
    examples: 
      application/json:
        - message: 'The value of field initial-time can not be empty.'
          internal-code: 2004
        - message: 'The value of field final-time can not be empty.'
          internal-code: 2005
        - message: 'The value of field include-children can not be empty.'
          internal-code: 2006
        
  ReservaPersonaInválida:
    description: |
            Los parámetros dados no representan una `ReservaPersona` válida
    schema:
      $ref: '#/definitions/Error'
    examples:
      application/json: 
        - message: 'The value of field active can not be empty.'
          internal-code: 2106
        - message: 'Can not activate unpaid reservation.'
          internal-code: 2107
        - message: 'The field id-reservation is forbidden when there is a reservation.'
          internal-code: 2108
        - message: 'Can not change an active person reservation.'
          internal-code: 2109
        - message: 'Can not change a person reservation with consumed accesses.'
          internal-code: 2110
        - message: 'Can not change a person reservation with consumed consumptions.'
          internal-code: 2111
        - message: 'Can not change a person reservation with topoffs.'
          internal-code: 2112
        - message: 'The value of field initial-date can not be empty.'
          internal-code: 2113
        - message: 'The value of field final-date can not be empty.'
          internal-code: 2114
        - message: 'The value of final-date [{final-date}] should be greater or equals than the value of initial-date [{initial-date}].'
          internal-code: 2115
        - message: 'The value of initial-date [{initial-date}] should be greater or equals than the value of Package field valid-from [{valid-from}].'
          internal-code: 2116
        - message: 'The value of final-date [{final-date}] should be smaller or equals than the value of Package field valid-through [{valid-through}].'
          internal-code: 2117
        - message: 'The value of initial-date [{initial-date}] should be greater or equals than the value of Social Event field initial-date [{initial-date}].'
          internal-code: 2118
        - message: 'The value of final-date [{final-date}] should be smaller or equals than the value of Social Event field final-date [{final-date}].'
          internal-code: 2119
        - message: 'There is already a person reservation for person with id {id-person} in the given dates.'
          internal-code: 2120
        - message: 'Can not activate an already active person reservation.'
          internal-code: 2121
        
  ReservaPersonaNoSePuedeEliminar:
    description: |
            No es posible eliminar la `ReservaPersona`
    schema:
      $ref: '#/definitions/Error'
    examples: 
      application/json:
        - message: 'Can not delete an active person reservation.'
          internal-code: 2201
        - message: 'Can not delete a person reservation with consumed accesses.'
          internal-code: 2202
        - message: 'Can not delete a person reservation with consumed consumptions.'
          internal-code: 2203
        - message: 'Can not delete a Person Reservation of a holder, must delete the associated Reservation instead.'
          internal-code: 2204
        - message: 'Can not change a person reservation with topoffs.'
          internal-code: 2205
        
  DocumentoDePersonaInválidoParaReservaPersona:
    description: |
            Los parámetros dados no representan un documento de `Persona` válido
    schema:
      $ref: '#/definitions/Error'
    examples: 
      application/json:
        - message: 'The value of field document-type can not be empty.'
          internal-code: 2301
        - message: 'The value of field document-number can not be empty.'
          internal-code: 2302
        - message: 'The value of field base-time can not be empty.'
          internal-code: 2303
        - message: 'Error querying external service.'
          internal-code: 5001
        
  TopoffDeAccesoInválido:
    description: |
            Los parámetros dados no representan una `TopoffDeAcceso` válido
    schema:
      $ref: '#/definitions/Error'
    examples:
      application/json: 
        - message: 'The value of field amount can not be empty.'
          internal-code: 2401
        - message: 'The value of field transaction-number can not be empty.'
          internal-code: 2402
        - message: 'Can not create a topoff on an inactive Person Reservation.'
          internal-code: 2403
        - message: 'The value of field topoffs can not be empty.'
          internal-code: 2404
        - message: 'The value of field topoff-time can not be empty.'
          internal-code: 2405
        
  TopoffPorCantidadInválido:
    description: |
            Los parámetros dados no representan una `TopoffPorCantidad` válido
    schema:
      $ref: '#/definitions/Error'
    examples:
      application/json: 
        - message: 'The value of field amount can not be empty.'
          internal-code: 2501
        - message: 'The value of field transaction-number can not be empty.'
          internal-code: 2502
        - message: 'Can not create a topoff on an inactive Person Reservation.'
          internal-code: 2503
        - message: 'The fields id-sku and id-sku-category are exclusive.'
          internal-code: 2504
        - message: 'Expected one of the following fields: [id-sku, id-sku-category].'
          internal-code: 2505
        - message: 'The value of field topoffs can not be empty.'
          internal-code: 2506
        - message: 'The value of field topoff-time can not be empty.'
          internal-code: 2507
        
  TopoffPorDineroInválido:
    description: |
            Los parámetros dados no representan una `TopoffPorDinero` válido
    schema:
      $ref: '#/definitions/Error'
    examples:
      application/json: 
        - message: 'The value of field money can not be empty.'
          internal-code: 2601
        - message: 'The value of field transaction-number can not be empty.'
          internal-code: 2602
        - message: 'Can not create a topoff on an inactive Person Reservation.'
          internal-code: 2603
        - message: 'The value of field topoffs can not be empty.'
          internal-code: 2604
        - message: 'The value of field topoff-time can not be empty.'
          internal-code: 2605
        
  TagSoportadoInválido:
    description: |
            Los parámetros dados no representan una `TagSoportado` válido
    schema:
      $ref: '#/definitions/Error'
    examples:
      application/json:  
        - message: 'The value of field name can not be empty.'
          internal-code: 2901
        - message: 'The value of field total-size can not be empty.'
          internal-code: 2902
        - message: 'The entity (Supported Tag[{name}]) already exists.'
          internal-code: 2903
        
  NombreTagInválido:
    description: |
            Los parámetros dados no representan una `NombreTag` válido
    schema:
      $ref: '#/definitions/Error'
    examples:
      application/json:  
        - message: 'The value of field name can not be empty.'
          internal-code: 3001
        - message: 'The entity (Client Tag[{name}]) already exists.'
          internal-code: 3002
        
  ListaOrdenesPersonaInválida:
    description: |
            Los parámetros dados no representan una `ListaOrdenesPersona` válida
    schema:
      $ref: '#/definitions/Error'
    examples:
      application/json:  
        - message: 'The value of field order-time can not be empty.'
          internal-code: 3101
        - message: 'The value of field missing-money can not be empty.'
          internal-code: 3102
        - message: 'The value of field money-consumptions can not be empty.'
          internal-code: 3103
        - message: 'The value of field orders can not be empty.'
          internal-code: 3104
        - message: 'The value of field money-consumed can not be empty.'
          internal-code: 3105
        - message: 'The value of field amount-consumed can not be empty.'
          internal-code: 3106
        - message: 'The value of field missing-amount can not be empty.'
          internal-code: 3107
        - message: 'The value of field amount-consumptions can not be empty.'
          internal-code: 3108
        - message: 'A non-empty list was expected for field amount-consumptions or field money-consumptions.'
          internal-code: 3109
        
  AccesoPersonaInválido:
    description: |
            Los parámetros dados no representan un `AccesoPersona` válido
    schema:
      $ref: '#/definitions/Error'
    examples:
      application/json: 
        - message: 'The value of field access-time can not be empty.'
          internal-code: 3301
        - message: 'The value of field accesses can not be empty.'
          internal-code: 3302
        
  SensorGlobalInválido:
    description: |
            Los parámetros dados no representan un `Sensor` global válido
    schema:
      $ref: '#/definitions/Error'
    examples:
      application/json: 
        - message: 'The value of field id can not be empty.'
          internal-code: 3401
        - message: 'The value of field type can not be empty.'
          internal-code: 3402
        - message: 'The entity (Sensor[{id}]) already exists.'
          internal-code: 3403
        
  SensorClienteInválido:
    description: |
            Los parámetros dados no representan un `Sensor` de cliente válido
    schema:
      $ref: '#/definitions/Error'
    examples:
      application/json: 
        - message: 'The entity (Sensor[{id}]) already exists (on the same client).'
          internal-code: 3501
        - message: 'The entity (Sensor[{id}]) already exists (on diferent client).'
          internal-code: 3502
        - message: 'Can not assign a person to a static sensor.'
          internal-code: 3503
        - message: 'Can not assign a location to a mobile sensor.'
          internal-code: 3504
        
  ActivaciónSensorClienteInválido:
    description: |
            Los parámetros dados no representan una `ActivaciónSensor` válida
    schema:
      $ref: '#/definitions/Error'
    examples:
      application/json: 
        - message: 'The value of field active can not be empty.'
          internal-code: 3505
        - message: 'The value of field synced can not be empty.'
          internal-code: 3506
        
  FechasReporteTransaccionesUsuarioInválidas:
    description: |
            Las fechas dadas no tienen un formato válido
    schema:
      $ref: '#/definitions/Error'
    examples:
      application/json: 
        - message: 'The value of field initial-time can not be empty.'
          internal-code: 3601
        - message: 'The value of field final-time can not be empty.'
          internal-code: 3602
        
  FechasReporteConsumosPorSkuInválidas:
    description: |
            Las fechas dadas no tienen un formato válido
    schema:
      $ref: '#/definitions/Error'
    examples:
      application/json: 
        - message: 'The value of field initial-time can not be empty.'
          internal-code: 3701
        - message: 'The value of field final-time can not be empty.'
          internal-code: 3702
          
  FechaBaseInválidaParaPaquete:
    description: |
            La fecha base dada no tiene un formato válido
    schema:
      $ref: '#/definitions/Error'
    examples:
      application/json: 
        - message: 'The value of field base-time can not be empty.'
          internal-code: 3801
          
  RelaciónPersonaInválida:
    description: |
            Los parámetros dados no representan una `RelaciónPersona` válida
    schema:
      $ref: '#/definitions/Error'
    examples:
      application/json: 
        - message: 'The value of field relationship can not be empty.'
          internal-code: 3901
        - message: 'The entity (Person Relationship) already exists.'
          internal-code: 3902
          
  ReglaPrecioInválida:
    description: |
            Los parámetros dados no representan una `ReglaPrecio` válida
    schema:
      $ref: '#/definitions/Error'
    examples:
      application/json: 
        - message: 'The value of field base-price can not be empty.'
          internal-code: 4001
        - message: 'The value of field tax-rate can not be empty.'
          internal-code: 4002
        - message: 'The value of field rules can not be empty.'
          internal-code: 4003
        - message: 'The value of field property can not be empty.'
          internal-code: 4004
        - message: 'The value of field value can not be empty.'
          internal-code: 4005
        - message: 'The rule with id {id} restricts over the same values than the new rule'
          internal-code: 4006
        
  ParámetrosEntidadesCreadasPorUsuarioInválidos:
    description: |
            Los parámetros dados tienen un formato válido
    schema:
      $ref: '#/definitions/Error'
    examples:
      application/json: 
        - message: 'The value of field kind can not be empty.'
          internal-code: 4101
        - message: 'The value of field initial-time can not be empty.'
          internal-code: 4102
        - message: 'The value of field final-time can not be empty.'
          internal-code: 4103
        - message: 'The value of field include-deleted can not be empty.'
          internal-code: 4104
        
  ParámetrosFechasActivacionPorUsuarioInválidos:
    description: |
            Los parámetros dados tienen un formato válido
    schema:
      $ref: '#/definitions/Error'
    examples:
      application/json: 
        - message: 'The value of field initial-time can not be empty.'
          internal-code: 4201
        - message: 'The value of field final-time can not be empty.'
          internal-code: 4202

definitions:
        
  Cliente:
    type: object
    required:
      - name
    properties:
      id:
        description: 'Id del cliente'
        type: integer
        format: int64
      name:
        description: 'Nombre del cliente'
        type: string
      requires-login:
        description: 'Indica si el cliente requiere autenticación para usar los servicios'
        type: boolean
        default: false
      external-person-service:
        description: 'Nombre del servicio externo a consultar para obtener información de las personas externas. Si se envía null no se consulta ningún servicio'
        type: string
        enum:
          - 'COMPENSAR'
      external-reservations-service:
        description: 'Nombre del servicio externo a consultar para obtener información de las reservas externas. Si se envía null no se consulta ningún servicio'
        type: string
        enum:
          - 'COMPENSAR'
        
  NombreTag:
    type: object
    required:
      - name
    properties:
      name:
        description: 'Nombre del tag que va a usar el cliente. Debe ser el nombre de alguno de los tags soportados (ver servicio supported-tags)'
        type: string
        
  Sensor:
    type: object
    required:
      - id
      - type
    properties:
      id:
        description: 'Id del sensor. Para los clientes debe ser el id de uno de los sensores globales registrados'
        type: string
      type:
        description: 'Tipo del sensor'
        type: string
        enum:
          - 'MOBILE'
          - 'STATIC'
      id-location:
        description: 'Id de la ubicación del cliente correspondiente donde se esta el sensor. Solo se permite para sensores estáticos asignados a un cliente. Para los sensores globales es null'
        type: integer
        format: int64
      id-person:
        description: 'Id de la persona del cliente correspondiente donde se esta el sensor. Solo se permite para sensores móviles asignados a un cliente. Para los sensores globales es null'
        type: integer
        format: int64
      id-client:
        description: 'Id del cliente al que esta asignado el sensor. Para los sensores globales es null'
        type: integer
        format: int64
      active:
        description: 'Indica si el sensor esta en operación actualmente, es decir si esta recogiendo datos operativos. Se ignora al momento de crear un sensor y se incializa en false'
        type: boolean
      last-sync:
        description: 'Fecha y hora de la ultima sincronización del sensor. Se actualiza con la fecha actual del servidor cuando se envía `synced` en `true` en el objeto `ActivaciónSensor`'
        type: string
        format: '["YYYYmmddHHMMSS", "BBBB dd, YYYY at hh:MMpp"]'
      last-activation:
        description: 'Fecha y hora de la ultima activación del sensor. Se actualiza con la fecha actual del servidor cuando se envía `active` en `true` en el objeto `ActivaciónSensor`'
        type: string
        format: '["YYYYmmddHHMMSS", "BBBB dd, YYYY at hh:MMpp"]'
      last-deactivation:
        description: 'Fecha y hora de la ultima desactivación del sensor. Se actualiza con la fecha actual del servidor cuando se envía `active` en `false` en el objeto `ActivaciónSensor`'
        type: string
        format: '["YYYYmmddHHMMSS", "BBBB dd, YYYY at hh:MMpp"]'
        
        
  ActivaciónSensor:
    type: object
    required:
      - active
      - synced
    properties:
      active:
        description: 'Indica si el sensor esta en operación actualmente. Es decir si esta recogiendo datos operativos. Los dispositivos deben informar al back al momento de finalizar/terminar operación el valor correcto de este campo'
        type: boolean
      synced:
        description: 'Indica si el sensor a sincronizado todos sus datos operativos que con el servidor. Tiene el valor de true si no existen datos pendientes por enviar al servidor y false en caso contrario. Los dispositivos deben informar al back mediante este campo al terminar de realizar una sincronización con el valor correcto. Adicionalemente, deben informar regularmente el estado de sincronización en periodos de inactividad extendidos'
        type: boolean
        
        
  TagSoportado:
    type: object
    required:
      - name
      - total-size
    properties:
      id:
        description: 'Id del tag soportado'
        type: integer
        format: int64
      name:
        description: 'Nombre del tag soportado'
        type: string
      total-size:
        description: 'Tamaño en bytes del tag'
        type: integer
        format: int32
      min-header-size:
        description: 'Valor calculado con el tamaño mínimo del header de los tags necesario para poder operar online. Cualquier tag usado debe tener mínimo este tamaño para poder escribir los datos básicos que identifican una reserva de persona. Es una constante y no depende del tag'
        type: integer
        format: int32
      header-size:
        description: 'Valor calculado con el tamaño del header de los tags. Cualquier tag que se quiera usar offline debe tener mínimo este tamaño para escribir los datos básicos del plan más es espacio requerido para los consumos/accesos del paquete. Es una constante y no depende del tag'
        type: integer
        format: int32
      available-size:
        description: 'Tamaño disponible para escribir paquetes. En general es el resultado de total-size - header-size'
        type: integer
        format: int32
      amount-sku-consumption-size:
        description: 'Tamaño que ocupa un consumo o topoff por cantidad en el tag cuando se crean con un id de SKU. Es una constante y no depende del tag'
        type: integer
        format: int32
      amount-sku-category-consumption-size:
        description: 'Tamaño que ocupa un consumo o topoff por cantidad en el tag cuando se crean con un id de categoría de SKU. Es una constante y no depende del tag'
        type: integer
        format: int32
      money-consumption-size:
        description: 'Tamaño que ocupa un consumo o topoff por dinero en el tag. Es una constante y no depende del tag'
        type: integer
        format: int32
      access-size:
        description: 'Tamaño que ocupa un acceso o topoff de acceso en el tag. Es una constante y no depende del tag'
        type: integer
        format: int32
      max-amount-sku-consumptions:
        description: 'Número máximo de consumos o topoffs por cantidad de SKU que caben en el tag, es decir cuanto consumos se pueden incluir en el tag si solo se incluyen este tipo de consumos. Tiene el valor de available-size / amount-sku-consumption-size'
        type: integer
        format: int32
      max-amount-sku-category-consumptions:
        description: 'Número máximo de consumos o topoffs por cantidad de categorías de SKU que caben en el tag, es decir cuanto consumos se pueden incluir en el tag si solo se incluyen este tipo de consumos. Tiene el valor de available-size / amount-sku-category-consumption-size'
        type: integer
        format: int32
      max-money-consumptions:
        description: 'Número máximo de consumos o topoffs por dinero que caben en el tag, es decir cuanto consumos se pueden incluir en el tag si solo se incluyen este tipo de consumos. Tiene el valor de available-size / money-consumption-size'
        type: integer
        format: int32
      max-accesses:
        description: 'Número máximo de accesos o topoffs de acceso que caben en el tag, es decir cuantos accesos se pueden incluir en el tag si solo se incluyen accesos. Tiene el valor de available-size / access-size'
        type: integer
        format: int32
        
  TagUbicación:
    type: object
    required:
      - name
    properties:
      name:
        description: 'Nombre, e identificador, del tag'
        type: string
        
  DatosUsuario:
    type: object
    required:
      - username
      - role
    properties:
      username:
        description: 'Nombre de usuario'
        type: string
      role:
        description: 'Rol del usuario'
        type: string
        enum:
          - 'admin'
          - 'query'
          - 'sales'
          - 'cashier'
          - 'waiter'
          - 'access'
          - 'promoter'
          - 'cashier-waiter'
      ids-locations:
        description: 'Ids de las ubicaciones en las que el usuario tiene asignado el rol dado. Si se quiere asignar el rol en todas las ubicaciones se debe mandar null'
        type: array
        items:
          type: integer
          format: int64
        
  Usuario:
    type: object
    required:
      - username
      - password
      - role
    properties:
      username:
        description: 'Nombre de usuario'
        type: string
      password:
        description: 'Contraseña del usuario. Solo se guarda un hash. Debe tener al menos 8 caracteres, 1 letra y 1 número'
        type: string
        format: password
      role:
        description: 'Rol del usuario'
        type: string
        enum:
          - 'admin'
          - 'query'
          - 'sales'
          - 'cashier'
          - 'waiter'
          - 'access'
          - 'promoter'
          - 'cashier-waiter'
      ids-locations:
        description: 'Ids de las ubicaciones en las que el usuario tiene asignado el rol dado. Si se quiere asignar el rol en todas las ubicaciones se debe mandar null'
        type: array
        items:
          type: integer
          format: int64
          
  ImageURL:
    type: object
    required:
      - url
    properties:
      url:
        description: 'URL donde se debe hacer POST a la imagen a cargar. La imagen debe tener name y id "file" en el form'
        type: string
  
  Opcionalidad:
    type: object
    required:
      - optionality
    properties:
      view:
        description: 'Nombre de la vista'
        type: string
        enum:
          - 'locations'
          - 'person'
      field:
        description: 'Nombre del campo. Debe ser un campo válido de la vista correspondiente'
        type: string
      optionality:
        description: 'Opcionalidad del campo'
        type: string
        enum:
          - 'MANDATORY'
          - 'OPTIONAL'
          - 'FORBIDDEN'
      applicable-types:
        description: 'Para entidades que tienen tipos (i.e. locations) define los tipos para los que la obligatoriedad del campo aplica. Para entidades con tipos por fuera de los especificados acá se ignora el campo correspondiente. No aplica para opcionalidades FORBIDDEN'
        type: array
        items:
          type: string
      default-value:
        description: 'Valor por defecto del campo. Debe ser del mismo tipo que el campo correspondiente'
      
  Ubicación:
    type: object
    required:
      - name
      - type
    properties:
      id:
        description: 'Id de la ubicación'
        type: integer
        format: int64
      name:
        description: 'Nombre de la ubicación'
        type: string
      type:
        description: 'Tipo de ubicación'
        type: string
        enum:
          - 'COUNTRY'
          - 'REGION'
          - 'CITY'
          - 'POI'
          - 'PROPERTY'
          - 'ZONE'
          - 'AREA'
          - 'TOUCHPOINT'
      id-parent-location:
        description: 'Id de la ubicación padre'
        type: integer
        format: int64
      description:
        description: 'Descripción de la ubicación'
        type: string
      active:
        description: 'Indica si la ubicación esta activa'
        type: boolean
        default: true
      latitude:
        description: 'Latitud de la ubicación, si se envía se debe enviar el campo longitude'
        type: number
        format: double
      longitude:
        description: 'Longitud de la ubicación, si se envía se debe enviar el campo latitude'
        type: number
        format: double
      web:
        description: 'Dirección web asociada a la ubicación. Solo aplica para ubicaciones de tipo COUNTRY, REGION, CITY, POI y PROPERTY, en cualquier otro caso se ignora el valor'
        type: string
      phone:
        description: 'Telefono asociado a la ubicación. Solo aplica para ubicaciones de tipo POI, PROPERTY, ZONE y AREA, en cualquier otro caso se ignora el valor'
        type: string
      address:
        description: 'Dirección asociada a la ubicación. Solo aplica para ubicaciones de tipo POI, PROPERTY, ZONE y AREA, en cualquier otro caso se ignora el valor'
        type: string
      mail:
        description: 'e-mail asociado a la ubicación. Solo aplica para ubicaciones de tipo POI, PROPERTY, ZONE y AREA, en cualquier otro caso se ignora el valor'
        type: string
      tags:
        title: TagsUbicación
        description: 'Tags asociadas a la ubicación. Solo aplica para ubicaciones de tipo POI, en cualquier otro caso se ignora el valor'
        type: array
        items:
          $ref: '#/definitions/TagUbicación'
      subtype:
        description: 'Subtipo de ubicación. Obligatorio para ubicaciones de tipo TOUCHPOINT, en cualquier otro caso se ignora el valor'
        type: string
        enum:
          - 'CASHLESS POS'
          - 'POS'
          - 'KIOSK'
          - 'AP'
          - 'RESTRICTED AP'
          - 'WIRELESS AP'
      key:
        description: 'Representa la cadena de ancestros de la ubicación. Se define como "{parent.key}:{this.id}:". En el caso de ubicaciones raíz es "{this.id}:"'
        type: string
      image-key:
        description: 'Cadena correspondiente a la imagen asociada a la ubicación. El valor null representa la ausencia de imagen'
        type: string
  
  PuntoDeVenta:
    type: object
    properties:
      id:
        description: 'Id de la ubicación'
        type: integer
        format: int64
      name:
        description: 'Nombre de la ubicación'
        type: string
      type:
        description: 'Tipo de ubicación'
        type: string
        enum:
          - 'COUNTRY'
          - 'REGION'
          - 'CITY'
          - 'POI'
          - 'PROPERTY'
          - 'ZONE'
          - 'AREA'
          - 'TOUCHPOINT'
      id-parent-location:
        description: 'Id de la ubicación padre'
        type: integer
        format: int64
      description:
        description: 'Descripción de la ubicación'
        type: string
      active:
        description: 'Indica si la ubicación esta activa'
        type: boolean
        default: true
      latitude:
        description: 'Latitud de la ubicación, si se envía se debe enviar el campo longitude'
        type: number
        format: double
      longitude:
        description: 'Longitud de la ubicación, si se envía se debe enviar el campo latitude'
        type: number
        format: double
      web:
        description: 'Dirección web asociada a la ubicación. Solo aplica para ubicaciones de tipo COUNTRY, REGION, CITY, POI y PROPERTY, en cualquier otro caso se ignora el valor'
        type: string
      phone:
        description: 'Telefono asociado a la ubicación. Solo aplica para ubicaciones de tipo POI, PROPERTY, ZONE y AREA, en cualquier otro caso se ignora el valor'
        type: string
      address:
        description: 'Dirección asociada a la ubicación. Solo aplica para ubicaciones de tipo POI, PROPERTY, ZONE y AREA, en cualquier otro caso se ignora el valor'
        type: string
      mail:
        description: 'e-mail asociado a la ubicación. Solo aplica para ubicaciones de tipo POI, PROPERTY, ZONE y AREA, en cualquier otro caso se ignora el valor'
        type: string
      tags:
        title: TagsUbicación
        description: 'Tags asociadas a la ubicación. Solo aplica para ubicaciones de tipo POI, en cualquier otro caso se ignora el valor'
        type: array
        items:
          $ref: '#/definitions/TagUbicación'
      subtype:
        description: 'Subtipo de ubicación. Obligatorio para ubicaciones de tipo TOUCHPOINT, en cualquier otro caso se ignora el valor'
        type: string
        enum:
          - 'CASHLESS POS'
          - 'POS'
          - 'KIOSK'
          - 'AP'
          - 'RESTRICTED AP'
          - 'WIRELESS AP'
      key:
        description: 'Representa la cadena de ancestros de la ubicación. Se define como "{parent.key}:{this.id}:". En el caso de ubicaciones raíz es "{this.id}:"'
        type: string
      image-key:
        description: 'Cadena correspondiente a la imagen asociada a la ubicación. El valor null representa la ausencia de imagen'
        type: string
      price:
        description: 'Precio al que se vende el SKU dado en la Ubicación dada'
        type: number
        format: double
      id-sku:
        description: 'Id del SKU asociado'
        type: integer
        format: int64
  
  
  Password:
    type: object
    required:
      - password
    properties:
      password:
        description: 'Nueva contraseña del usuario. Solo se guarda un hash. Debe tener al menos 8 caracteres, 1 letra y 1 número'
        type: string
  
  Moneda:
    type: object
    required:
      - name
    properties:
      id:
        description: 'Id de la moneda'
        type: integer
        format: int64
      name:
        description: 'Nombre de la moneda'
        type: string
  
  CategoríaSKU:
    type: object
    required:
      - name
    properties:
      id:
        description: 'Id de la categoría de SKU'
        type: integer
        format: int64
      name:
        description: 'Nombre de la categoría de SKU'
        type: string
      id-parent-category:
        description: 'Id de la categoría de SKU padre'
        type: integer
        format: int64
      key:
        description: 'Representa la cadena de ancestros de la categoría. Se define como "{parent.key}:{this.id}:". En el caso de categorías raíz es "{this.id}:"'
        type: string
  
  SKU:
    type: object
    required:
      - name
      - measure
      - cost
      - id-sku-category
      - tax-rate
      - external-code
    properties:
      id:
        description: 'Id del SKU'
        type: integer
        format: int64
      name:
        description: 'Nombre del SKU'
        type: string
      measure:
        description: 'Unidad de medida del SKU'
        type: string
      cost:
        description: 'Costo del SKU'
        type: number
        format: double
      tax-rate:
        description: 'Tasa impositiva del paquete (ej: 12.5 para representar un impuesto del 12.5%)'
        type: number
        format: double
      id-sku-category:
        description: 'Id de la CategoríaSKU a la que pertenece el SKU'
        type: integer
        format: int64
      ean-code:
        description: 'Código EAN del SKU'
        type: string
      external-code:
        description: 'Código externo del SKU'
        type: string
      image-key:
        description: 'Cadena correspondiente a la imagen asociada al SKU. El valor null representa la ausencia de imagen'
        type: string
        
  SKUEnPuntoDeVenta:
    type: object
    properties:
      id:
        description: 'Id del SKU'
        type: integer
        format: int64
      name:
        description: 'Nombre del SKU'
        type: string
      measure:
        description: 'Unidad de medida del SKU'
        type: string
      cost:
        description: 'Costo del SKU'
        type: number
        format: double
      id-sku-category:
        description: 'Id de la CategoríaSKU a la que pertenece el SKU'
        type: integer
        format: int64
      ean-code:
        description: 'Código EAN del SKU'
        type: string
      image-key:
        description: 'Cadena correspondiente a la imagen asociada al SKU. El valor null representa la ausencia de imagen'
        type: string
      price:
        description: 'Precio al que se vende el SKU dado en la Ubicación dada. Ya incluye el impuesto del SKU'
        type: number
        format: double
      tax-rate:
        description: 'Tasa impositiva del paquete (ej: 12.5 para representar un impuesto del 12.5%)'
        type: number
        format: double
      id-location:
        description: 'Id de la Ubicación asociada'
        type: integer
        format: int64
  
  UbicaciónVentaSKU:
    type: object
    required:
      - price
      - id-location
    properties:
      id-location:
        description: 'Id de la Ubicación'
        type: integer
        format: int64
      id-sku:
        description: 'Id del SKU'
        type: integer
        format: int64
      price:
        description: 'Precio de venta del SKU en la Ubicación'
        type: number
        format: double
  
  SKUenVenta:
    type: object
    required:
      - price
      - id-sku
    properties:
      id-location:
        description: 'Id de la Ubicación'
        type: integer
        format: int64
      id-sku:
        description: 'Id del SKU'
        type: integer
        format: int64
      price:
        description: 'Precio de venta del SKU en la Ubicación'
        type: number
        format: double
  
  Persona:
    type: object
    description: 'El campo `username` solo se incluye si se consulta a través del endpoint `/clients/{id_cliente}/reservations/` y se envía el parámetro `include-children` en `true`'
    required:
      - first-name
      - last-name
      - document-type
      - document-number
      - gender
      - birthdate
    properties:
      id:
        description: 'Id de la persona'
        type: integer
        format: int64
      first-name:
        description: 'Nombres de la persona'
        type: string
      last-name:
        description: 'Apellidos de la persona'
        type: string
      document-type:
        description: 'Tipo de documento de la persona'
        type: string
        enum:
          - 'CC'
          - 'NIT'
          - 'TI'
          - 'CE'
          - 'PA'
          - 'RC'
          - 'NUIP'
          - 'CD'
          - 'NO_DOCUMENT'
      document-number:
        description: 'Número de documento de la persona'
        type: string
      gender:
        description: 'Genero de la persona'
        type: string
        enum:
          - 'male'
          - 'female'
      birthdate:
        description: 'Fecha de nacimiento de la persona'
        type: string
        format: '["YYYYmmdd", "BBBB dd, at YYYY"]'
        example: 
          application/json:
            - '19900601'
            - 'June 01, 1990'
      mail:
        description: 'e-mail de la persona'
        type: string
      category:
        description: 'Categoría de la persona'
        type: string
        enum:
          - 'A'
          - 'B'
          - 'C'
          - 'D'
      affiliation:
        description: 'Tipo de afiliación de la persona'
        type: string
        enum:
          - 'COTIZANTE'
          - 'BENEFICIARIO'
      nationality:
        description: 'Nacionalidad de la persona'
        type: string
      profession:
        description: 'Profesión de la persona'
        type: string
      company:
        description: 'Empresa de la persona'
        type: string
      city:
        description: 'Ciudad de residencia de la persona'
        type: string
      is-phantom:
        description: 'Indica si la persona es una persona fantasma (i.e. persona sin datos)'
        type: string
      image-key:
        description: 'Cadena correspondiente a la imagen asociada a la persona. El valor null representa la ausencia de imagen'
        type: string
      username:
        description: 'Nombre del usuario que creo la entidad. Solo se incluye si se consulta a través del endpoint `/clients/{id_cliente}/reservations/` y se envía el parámetro `include-children` en `true`'
        type: string
  
  PersonaConRelación:
    type: object
    properties:
      id:
        description: 'Id de la persona destino de la relación'
        type: integer
        format: int64
      first-name:
        description: 'Nombres de la persona'
        type: string
      last-name:
        description: 'Apellidos de la persona'
        type: string
      document-type:
        description: 'Tipo de documento de la persona'
        type: string
        enum:
          - 'CC'
          - 'NIT'
          - 'TI'
          - 'CE'
          - 'PA'
          - 'RC'
          - 'NUIP'
          - 'CD'
          - 'NO_DOCUMENT'
      document-number:
        description: 'Número de documento de la persona'
        type: string
      gender:
        description: 'Genero de la persona'
        type: string
        enum:
          - 'male'
          - 'female'
      birthdate:
        description: 'Fecha de nacimiento de la persona'
        type: string
        format: '["YYYYmmdd", "BBBB dd, at YYYY"]'
        example: 
          application/json:
            - '19900601'
            - 'June 01, 1990'
      mail:
        description: 'e-mail de la persona'
        type: string
      category:
        description: 'Categoría de la persona'
        type: string
        enum:
          - 'A'
          - 'B'
          - 'C'
          - 'D'
      affiliation:
        description: 'Tipo de afiliación de la persona'
        type: string
        enum:
          - 'COTIZANTE'
          - 'BENEFICIARIO'
      nationality:
        description: 'Nacionalidad de la persona'
        type: string
      profession:
        description: 'Profesión de la persona'
        type: string
      company:
        description: 'Empresa de la persona'
        type: string
      city:
        description: 'Ciudad de residencia de la persona'
        type: string
      is-phantom:
        description: 'Indica si la persona es una persona fantasma (i.e. persona sin datos)'
        type: string
      image-key:
        description: 'Cadena correspondiente a la imagen asociada a la persona. El valor null representa la ausencia de imagen'
        type: string
      relationship:
        description: 'Tipo de relación de la persona origen con esta persona'
        type: string
        enum:
          - 'PARENT'
          - 'CHILD'
          - 'SPOUSE'
          - 'SIBLING'
          - 'UNKNOWN'
  
  RelaciónPersona:
    type: object
    required:
      - id-person
      - relationship
    properties:
      id-person:
        description: 'Id de la persona destino de la relación'
        type: integer
        format: int64
      relationship:
        description: 'Tipo de relación de la persona origen con esta persona'
        type: string
        enum:
          - 'PARENT'
          - 'CHILD'
          - 'SPOUSE'
          - 'SIBLING'
          - 'UNKNOWN'
  
  EventoSocial:
    type: object
    required:
      - name
      - description
      - initial-date
      - final-date
      - company
    properties:
      id:
        description: 'Id del evento social'
        type: integer
        format: int64
      name:
        description: 'Nombre del evento social'
        type: string
      description:
        description: 'Descripción del evento social'
        type: string
      company:
        description: 'Empresa asociada a la reserva'
        type: string
      document-number:
        description: 'Número de documento de la empresa asociada. Opcional a menos que se envíe document-type'
        type: string
      document-type:
        description: 'Tipo de documento de la empresa asociada. Opcional a menos que se envíe document-number'
        type: string
        enum:
          - 'CC'
          - 'NIT'
          - 'TI'
          - 'CE'
          - 'PA'
          - 'RC'
          - 'NUIP'
          - 'CD'
          - 'NO_DOCUMENT'
      initial-date:
        description: 'Fecha de inicial del evento social'
        type: string
        format: '["YYYYmmddHHMMSS", "BBBB dd, YYYY at hh:MMpp"]'
        example: 
          application/json:
            - '19900601010101'
            - 'June 01, 1990 at 01:01AM'
      final-date:
        description: 'Fecha de final del evento social'
        type: string
        format: '["YYYYmmddHHMMSS", "BBBB dd, YYYY at hh:MMpp"]'
        example: 
          application/json:
            - '19900601010101'
            - 'June 01, 1990 at 01:01AM'
  
  Paquete:
    type: object
    required:
      - name
      - base-price
      - tax-rate
      - description
      - restricted-consumption
      - valid-from
      - valid-through
      - id-location
    properties:
      id:
        description: 'Id del paquete'
        type: integer
        format: int64
      historic-id:
        description: 'Id usado para diferenciar diferentes versiones del paquete. Todas las versiones de un paquete comparten el mismo id pero tienen un historic-id diferente. El historic-id no es único, pueden existir múltiples paquetes con el mismo historic-id pero diferente id. La llave completa de un paquete es la tupla (id, historic-id)'
        type: integer
        format: int64
      active:
        description: 'Indica si este paquete es la última versión del paquete con id dado. Ver historic-id'
        type: boolean
      name:
        description: 'Nombre del paquete'
        type: string
      base-price:
        description: 'Precio base por defecto del paquete'
        type: number
        format: double
      tax-rate:
        description: 'Tasa impositiva del paquete (ej: 12.5 para representar un impuesto del 12.5%)'
        type: number
        format: double
      description:
        description: 'Descripción del paquete'
        type: string
      external-code:
        description: 'Código externo del paquete. Usado para asociar los paquetes con las entidades correspondientes de los clientes'
        type: string
      restricted-consumption:
        description: 'Indica si se debe restringir el consumo de las personas con este paquete para evitar consumos superiores a los incluidos'
        type: boolean
      available-for-sale:
        description: 'Indica si el paquete esta disponible para la venta en taquilla. Se usa para filtrar paquetes de eventos empresariales'
        type: boolean
        default: true
      valid-from:
        description: 'Fecha en la que el paquete empieza a ser válido'
        type: string
        format: '["YYYYmmddHHMMSS", "BBBB dd, YYYY at hh:MMpp"]'
        example: 
          application/json:
            - '19900601010101'
            - 'June 01, 1990 at 01:01AM'
      valid-through:
        description: 'Fecha hasta la que el paquete es válido'
        type: string
        format: '["YYYYmmddHHMMSS", "BBBB dd, YYYY at hh:MMpp"]'
        example: 
          application/json:
            - '19900601010101'
            - 'June 01, 1990 at 01:01AM'
      id-location:
        description: 'Id de la Ubicación donde se vende el paquete'
        type: integer
        format: int64
  
  ReglaPrecio:
    type: object
    required:
      - base-price
      - tax-rate
      - rules
    properties:
      id:
        description: 'Id de la regla'
        type: integer
        format: int64
      historic-id:
        description: 'Id usado para diferenciar diferentes versiones de la regla. Todas las versiones de una regla comparten el mismo id pero tienen un historic-id diferente. El historic-id no es único, pueden existir múltiples reglas dentro del mismo paquete con el mismo historic-id pero diferente id. La llave completa de una regla es la tupla (id-package, historic-id-package, id, historic-id)'
        type: integer
        format: int64
      active:
        description: 'Indica si esta regla es la última versión de la regla con id dado. Ver historic-id'
        type: boolean
      base-price:
        description: 'Precio base a usar si esta regla es aplicable'
        type: number
        format: double
      tax-rate:
        description: 'Tasa impositiva a usar si esta regla es aplicable (ej: 12.5 para representar un impuesto del 12.5%)'
        type: number
        format: double
      rules:
        description: 'Lista de reglas que deben cumplirse para que se aplique este precio y tasa impositiva'
        type: array
        items:
          $ref: '#/definitions/RestricciónReglaPrecio'
        
  
  RestricciónReglaPrecio:
    type: object
    required:
      - property
      - value
    properties:
      property:
        description: 'Nombre de la propiedad de la persona de la reserva a usar para verificar si esta regla es aplicable'
        type: string
        enum:
          - 'age-group'
          - 'category'
      value:
        description: "Valor que debe tomar la propiedad `property` de la persona para que esta regla sea aplicable. De ser 'A', 'B', 'C', 'D' o null si `property` es `category`. Debe ser 'INFANT' (0 a 2 años inclusive), 'KID' (3 a 11 años inclusive) o 'ADULT' (12 años en adelante) si `property` es `age-group`"
        type: string
  
  AccesoPaquete:
    type: object
    required:
      - id-location
    properties:
      id:
        description: 'Id del acceso del paquete. El id no es único, pueden existir múltiples accesos con el mismo id pero diferente id-package. La llave completa para identificar un acceso activo es la tupla (id-package, id)'
        type: integer
        format: int64
      historic-id:
        description: 'Id usado para diferenciar diferentes versiones del acceso. Todas las versiones de un acceso comparten el mismo id pero tienen un historic-id diferente. El historic-id no es único, pueden existir múltiples accesos dentro del mismo paquete con el mismo historic-id pero diferente id. La llave completa de un acceso es la tupla (id-package, historic-id-package, id, historic-id)'
        type: integer
        format: int64
      active:
        description: 'Indica si este acceso es la última versión del acceso con id dado. Ver historic-id'
        type: boolean
      id-package:
        description: 'Id del paquete correspondiente. Corresponde al campo id del paquete'
        type: integer
        format: int64
      historic-id-package:
        description: 'Id historico del paquete correspondiente. Corresponde al campo historic-id del paquete'
        type: integer
        format: int64
      id-location:
        description: 'Id de la Ubicación incluida en el acceso'
        type: integer
        format: int64
      amount-included:
        description: 'Número de veces que se puede usar el acceso para acceder a la ubicación correspondiente. Al crear una reserva se multiplica por el número de días de la reserva. Un valor de 0 indica una cantidad ilimitada'
        type: integer
        format: int32
        default: 0
      unlimited-amount:
        description: 'Indica si el acceso tiene cantidad ilimitada'
        type: boolean
  
  ConsumoCantidadPaquete:
    type: object
    required:
      - amount-included
    properties:
      id:
        description: 'Id del consumo por cantidad del paquete. El id no es único, pueden existir múltiples consumos con el mismo id pero diferente id-package. La llave completa para identificar un consumo activo es la tupla (id-package, id)'
        type: integer
        format: int64
      historic-id:
        description: 'Id usado para diferenciar diferentes versiones del consumo. Todas las versiones de un consumo comparten el mismo id pero tienen un historic-id diferente. El historic-id no es único, pueden existir múltiples consumos dentro del mismo paquete con el mismo historic-id pero diferente id. La llave completa de un consumo es la tupla (id-package, historic-id-package, id, historic-id)'
        type: integer
        format: int64
      active:
        description: 'Indica si este consumo es la última versión del consumo con id dado. Ver historic-id'
        type: boolean
      id-package:
        description: 'Id del paquete correspondiente. Corresponde al campo id del paquete'
        type: integer
        format: int64
      historic-id-package:
        description: 'Id historico del paquete correspondiente. Corresponde al campo historic-id del paquete'
        type: integer
        format: int64
      id-sku:
        description: 'Id del SKU incluido en el consumo. Se espera uno y solo uno de los campos id-sku o id-sku-category'
        type: integer
        format: int64
      id-sku-category:
        description: 'Id de la CategoríaSKU incluida en el consumo. Se espera uno y solo uno de los campos id-sku o id-sku-category'
        type: integer
        format: int64
      amount-included:
        description: 'Número de items del SKU o CategoríaSKU incluidos en el consumo. Al crear una reserva se multiplica por el número de días de la reserva'
        type: integer
        format: int32
        
  ConsumoDineroPaquete:
    type: object
    required:
      - money-included
    properties:
      id:
        description: 'Id del consumo por dinero del paquete. El id no es único, pueden existir múltiples consumos con el mismo id pero diferente id-package. La llave completa para identificar un consumo activo es la tupla (id-package, id)'
        type: integer
        format: int64
      historic-id:
        description: 'Id usado para diferenciar diferentes versiones del consumo. Todas las versiones de un consumo comparten el mismo id pero tienen un historic-id diferente. El historic-id no es único, pueden existir múltiples consumos dentro del mismo paquete con el mismo historic-id pero diferente id. La llave completa de un consumo es la tupla (id-package, historic-id-package, id, historic-id)'
        type: integer
        format: int64
      active:
        description: 'Indica si este consumo es la última versión del consumo con id dado. Ver historic-id'
        type: boolean
      id-package:
        description: 'Id del paquete correspondiente. Corresponde al campo id del paquete'
        type: integer
        format: int64
      historic-id-package:
        description: 'Id historico del paquete correspondiente. Corresponde al campo historic-id del paquete'
        type: integer
        format: int64
      money-included:
        description: 'Cantidad de dinero de la moneda con nombre currency incluida en el consumo. Al crear una reserva se multiplica por el número de días de la reserva'
        type: number
        format: double
      currency:
        description: 'Nombre de la moneda asociada al consumo'
        type: string
        default: 'COP'
  
  Reserva:
    type: object
    description: 'Los campos `persons-reservations` y `username` solo se incluyen si se consulta a través del endpoint `/clients/{id_cliente}/reservations/` y se envía el parámetro `include-children` en `true`'
    properties:
      reservation-number:
        description: 'Número único asignado por el servidor para identificar la reserva. Este número es único a nivel de cada cliente. Tiene el formato #R{identificador} donde identificador es un entero'
        type: string
      id:
        description: 'Id de la reserva'
        type: integer
        format: int64
      payment:
        description: 'Campo opcional con el valor pagado por la reserva'
        type: number
        format: double
        default: 0
      transaction-number:
        description: 'Número de transacción asociado al pago de la reserva'
        type: string
      is-paid:
        description: 'Indica si la reserva fue pagada. Es verdadero si transaction-number es diferente de null y falso en caso contrario'
        type: boolean
      id-social-event:
        description: 'Id del evento social asociado a la reserva'
        type: integer
        format: int64
      username:
        description: 'Nombre del usuario que creo la entidad. Solo se incluye si se consulta a través del endpoint `/clients/{id_cliente}/reservations/` y se envía el parámetro `include-children` en `true`'
        type: string
      persons-reservations:
        description: 'Lista de reservas persona hijas de la reserva. Solo se incluye si se consulta a través del endpoint `/clients/{id_cliente}/reservations/` y se envía el parámetro `include-children` en `true`'
        type: array
        items:
          $ref: '#/definitions/ReservaPersona'
      
  PagoReserva:
    type: object
    properties:
      transaction-number:
        description: 'Número de transacción asociado al pago de la reserva'
        type: string
      payment:
        description: 'Campo opcional con el valor pagado por la reserva'
        type: number
        format: double
  
  ResumenTransaccionesUsuario:
    type: object
    properties:
      username:
        description: 'Nombre de usario'
        type: string
      total:
        description: 'Total de las transacciones realizadas. Suma del campo `value`de las transacciones en `transactions`'
        type: number
        format: double
      transactions:
        description: 'Lista de transacciones realizadas por el usuario en el rango de fechas consultado'
        type: array
        items:
          $ref: '#/definitions/Transacción'
  
  Transacción:
    type: object
    properties:
      transaction-number:
        description: 'Número de transacción correspondiente'
        type: string
      value:
        description: 'Valor en COP de la transacción'
        type: number
        format: double
      transaction-time:
        description: 'Tiempo y hora del servidor cuando se realizo de la transacción'
        type: string
        format: '["YYYYmmddHHMMSS", "BBBB dd, YYYY at hh:MMpp"]'
  
  ActivacionesYDesactivacionesPorUsuario:
    type: object
    properties:
      username:
        description: 'Nombre de usuario'
        type: string
      activations:
        description: 'Lista de activaciones realizadas por el usuario. Cada activación incluye los ids de la reserva persona correspondiente y la fecha de operación'
        type: array
        items:
          $ref: '#/definitions/ActivacionReservaPersona'
      deactivations:
        description: 'Lista de desactivaciones realizadas por el usuario. Cada desactivaciones incluye los ids de la reserva persona correspondiente y la fecha de operación'
        type: array
        items:
          $ref: '#/definitions/ActivacionReservaPersona'
  
  ActivacionReservaPersona:
    type: object
    properties:
      id-reservation:
        description: 'Id de la reserva correspondiente'
        type: integer
        format: int64
      id-person-reservation:
        description: 'Id de la reserva persona correspondiente'
        type: integer
        format: int64
      operation-time:
        description: 'Tiempo y hora del servidor cuando se realizo la activación o desactivación'
        type: string
        format: '["YYYYmmddHHMMSS", "BBBB dd, YYYY at hh:MMpp"]'
      username:
        description: 'Nombre del usuario que realizo la activación/desactivación'
        type: string
  
  EntidadesCreadasPorUsuario:
    type: object
    properties:
      username:
        description: 'Nombre de usuario'
        type: string
      entities:
        description: 'Lista de entidades creadas por el usuario en el rango de fechas consultado'
        type: array
        items:
          $ref: '#/definitions/EntidadConTiempoCreación'
  
  EntidadConTiempoCreación:
    type: object
    properties:
      entity:
        $ref: '#/definitions/EntidadReporte'
      operation-time:
        description: 'Tiempo y hora del servidor cuando se creo la entidad'
        type: string
        format: '["YYYYmmddHHMMSS", "BBBB dd, YYYY at hh:MMpp"]'
  
  EntidadReporte:
    description: 'Entidad creada por el usuario dado en la fecha dada. Esta entidad va a tener los campos de la entidad correspondiente según el valor de `kind` dado por parámetro. Por ejemplo, si se envía `reservations` tendra todos los campos de la entidad `Reserva` más el campo `entity-deleted`'
    type: object
    properties:
      entity-deleted:
        description: 'Indica si la entidad a sido eliminada con posterioridad a su creación. Se usa para identificar devoluciones'
        type: boolean
        
  ReservaPersona:
    type: object
    description: 'Los campos `amount-topoffs`, `access-topoffs`, `money-topoffs`, `activations`, `deactivations`, `person-acceses`, `person-orders`, `person` y `username` solo se incluyen si se consulta a través del endpoint `/clients/{id_cliente}/reservations/` y se envía el parámetro `include-children` en `true`'
    required:
      - initial-date
      - final-date
      - id-package
    properties:
      id:
        description: 'Id de la reserva de persona. El id no es único, pueden existir múltiples reserva de persona con el mismo id pero diferente id-reservation. La llave completa para identificar una reserva de persona es la tupla (id-reservation, id)'
        type: integer
        format: int64
      id-package:
        description: 'Id del paquete correspondiente. Corresponde al campo id del paquete'
        type: integer
        format: int64
      historic-id-package:
        description: 'Id historico del paquete correspondiente. Corresponde al campo historic-id del paquete'
        type: integer
        format: int64
      id-reservation:
        description: 'Id de la reserva correspondiente. Corresponde al campo id de la reserva'
        type: integer
        format: int64
      initial-date:
        description: 'Fecha de inicial de la reserva persona'
        type: string
        format: '["YYYYmmddHHMMSS", "BBBB dd, YYYY at hh:MMpp"]'
        example: 
          application/json:
            - '19900601010101'
            - 'June 01, 1990 at 01:01AM'
      purchase-time:
        description: 'Fecha de compra de la reserva persona. Para las reservas creadas por el API no se envía, el back asigna la fecha actual al momento de crear la reserva. Para las reservas de Orbita se registra la fecha y hora enviadas por el servicio externo'
        type: string
        format: '["YYYYmmddHHMMSS"]'
        example: 
          application/json:
            - '19900601010101'
      activation-dates:
        description: 'Fechas en las que se a activado la reserva persona'
        type: array
        items:
          type: string
          format: '["YYYYmmddHHMMSS", "BBBB dd, YYYY at hh:MMpp"]'
          example: 
            application/json:
              - '19900601010101'
              - 'June 01, 1990 at 01:01AM'
      deactivation-dates:
        description: 'Fechas en las que se a desactivado la reserva persona'
        type: array
        items:
          type: string
          format: '["YYYYmmddHHMMSS", "BBBB dd, YYYY at hh:MMpp"]'
          example: 
            application/json:
              - '19900601010101'
              - 'June 01, 1990 at 01:01AM'
      final-date:
        description: 'Fecha de final de la reserva persona'
        type: string
        format: '["YYYYmmddHHMMSS", "BBBB dd, YYYY at hh:MMpp"]'
        example: 
          application/json:
            - '19900601010101'
            - 'June 01, 1990 at 01:01AM'
      id-person:
        description: 'Id de la persona asociada a la reserva de persona. Corresponde al campo id de la persona. Si no se envía se crea una persona fantasma (ver campo is-phantom de persona) y se asocia a la reserva de persona'
        type: integer
        format: int64
      active:
        description: 'Indica si la reserva esta activa, i.e. si se permiten consumos sobre la reserva. Es obligatorio al hacer PUT. Inicialmente tiene un valor de falso indicando que aún no se permiten consumos sobre la reserva de persona. Una vez se le entrega el dispositivo/sensor que identifica la reserva a la persona correspondiente se debe cambiar a verdadero para permitir consumos sobre la reserva. En caso de que el dispositivo/sensor se pierda o se desee bloquear los consumos de la persona se debe cambiar nuevamente a falso'
        type: boolean
      is-holder:
        description: 'Indica si esta reserva de persona está asociada al titular de la reserva. Tiene un valor de verdadero si esta es la primera reserva de persona creada para la reserva con id id-reservation y un valor de falso en caso contrario. Si es verdadero no es posible eliminar esta reserva de persona directamente, la única forma de eliminarla es eliminando la Reserva correspondiente'
        type: boolean
      base-price:
        description: 'Precio base de esta reserva persona. Es un campo calculado con base en las reglas de precio definidas en el paquete'
        type: number
        format: double
      tax-rate:
        description: 'Tasa impositiva de esta reserva persona. Es un campo calculado con base en las reglas de precio definidas en el paquete'
        type: number
        format: double
      username:
        description: 'Nombre del usuario que creo la entidad. Solo se incluye si se consulta a través del endpoint `/clients/{id_cliente}/reservations/` y se envía el parámetro `include-children` en `true`'
        type: string
      amount-topoffs:
        description: 'Lista de topoffs por cantidad hijos de la reserva persona. Solo se incluye si se consulta a través del endpoint `/clients/{id_cliente}/reservations/` y se envía el parámetro `include-children` en `true`'
        type: array
        items:
          $ref: '#/definitions/TopoffPorCantidad'
      money-topoffs:
        description: 'Lista de topoffs por dinero hijos de la reserva persona. Solo se incluye si se consulta a través del endpoint `/clients/{id_cliente}/reservations/` y se envía el parámetro `include-children` en `true`'
        type: array
        items:
          $ref: '#/definitions/TopoffPorDinero'
      access-topoffs:
        description: 'Lista de topoffs de accesos hijos de la reserva persona. Solo se incluye si se consulta a través del endpoint `/clients/{id_cliente}/reservations/` y se envía el parámetro `include-children` en `true`'
        type: array
        items:
          $ref: '#/definitions/TopoffDeAcceso'
      person-accesses:
        description: 'Lista de accesos de persona hijos de la reserva persona. Solo se incluye si se consulta a través del endpoint `/clients/{id_cliente}/reservations/` y se envía el parámetro `include-children` en `true`'
        type: array
        items:
          $ref: '#/definitions/AccesoPersona'
      person-orders:
        description: 'Lista de ordenes hijas de la reserva persona. Solo se incluye si se consulta a través del endpoint `/clients/{id_cliente}/reservations/` y se envía el parámetro `include-children` en `true`'
        type: array
        items:
          $ref: '#/definitions/OrdenPersona'
      activations:
        description: 'Lista de activaciones de la reserva persona. Solo se incluye si se consulta a través del endpoint `/clients/{id_cliente}/reservations/` y se envía el parámetro `include-children` en `true`'
        type: array
        items:
          $ref: '#/definitions/ActivacionReservaPersona'
      deactivations:
        description: 'Lista de desactivaciones de la reserva persona. Solo se incluye si se consulta a través del endpoint `/clients/{id_cliente}/reservations/` y se envía el parámetro `include-children` en `true`'
        type: array
        items:
          $ref: '#/definitions/ActivacionReservaPersona'
      person:
        $ref: '#/definitions/Persona'
      
  ActivaciónReservaPersona:
    type: object
    required:
      - active
    properties:
      active:
        description: 'Indica si la reserva esta activa, i.e. si se permiten consumos sobre la reserva. Ver campo active de ReservaPersona'
        type: boolean
      
  LlaveCliente:
    type: object
    properties:
      tag-key:
        description: 'Llave secreta del cliente. Los bytes de la llave se representan en un string en formato hexadecimal'
        type: string
      
  FondosDisponiblesReservaPersona:
    type: object
    properties:
      currency:
        description: 'Nombre de la moneda a la que corresponden los fondos disponibles. Corresponde al campo name de la moneda. Siempre viene en compañía de los campos id-currency y available-money'
        type: string
      id-currency:
        description: 'Id de la moneda a la que corresponden los fondos disponibles. Corresponde al campo id de la moneda. Siempre viene en compañía de los campos currency y available-amount'
        type: integer
        format: int64
      available-money:
        description: 'Cantidad de dinero disponible para consumos futuros. Siempre viene en compañía del campo currency indicando el nombre de la moneda correspondiente'
        type: number
        format: double
      id-sku:
        description: 'Id del SKU al que corresponden los fondos disponibles. Corresponde al campo id del SKU. Siempre viene en compañía del campo available-amount'
        type: integer
        format: int64
      id-sku-category:
        description: 'Id de la categoría de SKU a la que corresponden los fondos disponibles. Corresponde al campo id de la categoría de SKU. Siempre viene en compañía del campo available-amount'
        type: number
        format: int64
      id-location:
        description: 'Id de la ubicación a la que corresponden los fondos disponibles. Corresponde al campo id de la ubicación. Siempre viene en compañía de los campos available-amount y unlimited-amount'
        type: integer
        format: int64
      available-amount:
        description: 'Cantidad de unidades disponibles para consumos futuros de un SKU, categoría de SKU o ubicación. Siempre viene en compañía de uno, y solo uno, de los campos id-sku, id-sku.category o id-location indicando el SKU, categoría de SKU o ubicación a la que corresponden los fondos disponibles'
        type: integer
        format: int32
      unlimited-amount:
        description: 'Solo para fondos disponibles correspondientes a accesos, i.e. aquellos que tienen el campo id-location. Indica si la reserva de persona incluye accesos ilimitados a la ubicación correspondiente'
        type: boolean
      overflow-state:
        description: 'Indica el estado de los fondos disponibles. Un valor de `overflown` indica que no hay suficientes fondos disponibles para cubrir la totalidad de consumos. Un valor de `temporally-overflown` existen suficientes fondos disponibles para cubrir todos los consumos, pero hubo un momento en que los consumos superaron los fondos disponibles. Un valor de `ok` indica que en todo momento hubo suficientes fondos disponibles para cubrir los consumos'
        type: string
        enum:
          - 'ok'
          - 'overflown'
          - 'temporally-overflown'
  SaldoFondo:
    type: object
    properties:
      currency:
        description: 'Nombre de la moneda a la que corresponde el saldo. Corresponde al campo name de la moneda. Siempre viene en compañía de los campos id-currency y balance-money'
        type: string
      id-currency:
        description: 'Id de la moneda a la que corresponde el saldo. Corresponde al campo id de la moneda. Siempre viene en compañía de los campos currency y balance-amount'
        type: integer
        format: int64
      balance-money:
        description: 'Cantidad de dinero final de la reserva. Puede ser negativo en caso de haber consumido una mayor cantidad de dinero a la incluida en la reserva. Siempre viene en compañía del campo currency indicando el nombre de la moneda correspondiente'
        type: number
        format: double
      id-sku:
        description: 'Id del SKU al que corresponde el saldo. Corresponde al campo id del SKU. Siempre viene en compañía del campo balance-amount'
        type: integer
        format: int64
      id-sku-category:
        description: 'Id de la categoría de SKU a la que corresponde el saldo. Corresponde al campo id de la categoría de SKU. Siempre viene en compañía del campo balance-amount'
        type: integer
        format: int64
      id-location:
        description: 'Id de la ubicación a la que corresponde el saldo. Corresponde al campo id de la ubicación. Siempre viene en compañía de los campos balance-amount y unlimited-amount'
        type: integer
        format: int64
      balance-amount:
        description: 'Cantidad de unidades final de un SKU, categoría de SKU o ubicación. Puede ser negativo en caso de haber consumido una mayor cantidad de unidades a las incluidas en la reserva. Siempre viene en compañía de uno, y solo uno, de los campos id-sku, id-sku.category o id-location indicando el SKU, categoría de SKU o ubicación a la que corresponde el saldo'
        type: integer
        format: int32
      unlimited-amount:
        description: 'Solo para saldos correspondientes a accesos, i.e. aquellos que tienen el campo id-location. Indica si la reserva de persona incluye accesos ilimitados a la ubicación correspondiente'
        type: boolean
      overflow-state:
        description: 'Indica el estado de los fondos disponibles. Un valor de `overflown` indica que no hay suficientes fondos disponibles para cubrir la totalidad de consumos. Un valor de `temporally-overflown` existen suficientes fondos disponibles para cubrir todos los consumos, pero hubo un momento en que los consumos superaron los fondos disponibles. Un valor de `ok` indica que en todo momento hubo suficientes fondos disponibles para cubrir los consumos'
        type: string
        enum:
          - 'ok'
          - 'overflown'
          - 'temporally-overflown'
      
  BalanceReservaPersona:
    type: object
    properties:
      id-reservation:
        description: 'Id de la reserva correspondiente. Corresponde al campo id de la reserva'
        type: integer
        format: int64
      id-person-reservation:
        description: 'Id de la reserva de persona correspondiente. Corresponde al campo id de la reserva de persona'
        type: integer
        format: int64
      balance:
        description: 'Saldo de la reserva. Es el mismo resultado de consultar el balance de la reserva de persona con id `id-person-reservation usando el servicio` /clients/{id_cliente}/reservations/{id_reserva}/persons-reservations/{id_reserva_persona}/balance/.'
        type: array
        items:
          $ref: '#/definitions/SaldoFondo'
        
        
  TopoffDeAcceso:
    type: object
    description: 'El campo `username` solo se incluye si se consulta a través del endpoint `/clients/{id_cliente}/reservations/` y se envía el parámetro `include-children` en `true`'
    required:
      - id-location
      - transaction-number
      - topoff-time
      - id-reservation
      - id-person-reservation
    properties:
      id:
        description: 'Id del topoff de acceso. El id no es único, pueden existir múltiples topoffs con el mismo id pero diferente id-person-reservation. La llave completa para identificar un topoff es la tupla (id-reservation, id-person-reservation, id)'
        type: integer
        format: int64
      id-reservation:
        description: 'Id de la reserva correspondiente. Corresponde al campo id de la reserva'
        type: integer
        format: int64
      id-person-reservation:
        description: 'Id de la reserva de persona correspondiente. Corresponde al campo id de la reserva de persona'
        type: integer
        format: int64
      transaction-number:
        description: 'Número de transacción asociado al pago del topoff'
        type: string
      topoff-time:
        description: 'Fecha y hora del topoff'
        type: string
        format: '["YYYYmmddHHMMSS", "BBBB dd, YYYY at hh:MMpp"]'
      id-location:
        description: 'Id de la ubicación asociada al topoff. Corresponde al campo id de la ubicación'
        type: integer
        format: int64
      amount:
        description: 'Número de veces que se puede usar el topoff para acceder a la ubicación correspondiente. Un valor de 0 indica una cantidad ilimitada'
        type: integer
        format: int32
        default: 0
      unlimited-amount:
        description: 'Indica si el acceso tiene cantidad ilimitada'
        type: boolean
      username:
        description: 'Nombre del usuario que creo la entidad. Solo se incluye si se consulta a través del endpoint `/clients/{id_cliente}/reservations/` y se envía el parámetro `include-children` en `true`'
        type: string
        
  ListaTopoffsDeAcceso:
    type: object
    required:
      - topoffs
    properties:
      topoffs:
        description: 'Lista de topoffs a registrar, puede ser vacía'
        type: array
        items:
          $ref: '#/definitions/TopoffDeAcceso'
        
  TopoffPorCantidad:
    type: object
    description: 'El campo `username` solo se incluye si se consulta a través del endpoint `/clients/{id_cliente}/reservations/` y se envía el parámetro `include-children` en `true`'
    required:
      - amount
      - transaction-number
      - topoff-time
      - id-reservation
      - id-person-reservation
    properties:
      id:
        description: 'Id del topoff por cantidad. El id no es único, pueden existir múltiples topoffs con el mismo id pero diferente id-person-reservation. La llave completa para identificar un topoff es la tupla (id-reservation, id-person-reservation, id)'
        type: integer
        format: int64
      id-reservation:
        description: 'Id de la reserva correspondiente. Corresponde al campo id de la reserva'
        type: integer
        format: int64
      id-person-reservation:
        description: 'Id de la reserva de persona correspondiente. Corresponde al campo id de la reserva de persona'
        type: integer
        format: int64
      transaction-number:
        description: 'Número de transacción asociado al pago del topoff'
        type: string
      topoff-time:
        description: 'Fecha y hora del topoff'
        type: string
        format: '["YYYYmmddHHMMSS", "BBBB dd, YYYY at hh:MMpp"]'
      id-sku:
        description: 'Id del SKU asociado al topoff. Corresponde al campo id del SKU. Se espera uno, y solo uno, de los campos id-sku e id-sku-category'
        type: integer
        format: int64
      id-sku-category:
        description: 'Id de la categoría de SKU asociada al topoff. Corresponde al campo id de la categoría de SKU. Se espera uno, y solo uno, de los campos id-sku e id-sku-category'
        type: integer
      amount:
        description: 'Número de veces que se puede usar el topoff para consumir el SKU o categoría de SKU correspondiente'
        type: integer
        format: int32
      username:
        description: 'Nombre del usuario que creo la entidad. Solo se incluye si se consulta a través del endpoint `/clients/{id_cliente}/reservations/` y se envía el parámetro `include-children` en `true`'
        type: string
        
  ListaTopoffsPorCantidad:
    type: object
    required:
      - topoffs
    properties:
      topoffs:
        description: 'Lista de topoffs a registrar, puede ser vacía'
        type: array
        items:
          $ref: '#/definitions/TopoffPorCantidad'
        
  TopoffPorDinero:
    type: object
    description: 'El campo `username` solo se incluye si se consulta a través del endpoint `/clients/{id_cliente}/reservations/` y se envía el parámetro `include-children` en `true`'
    required:
      - money
      - transaction-number
      - topoff-time
      - id-reservation
      - id-person-reservation
    properties:
      id:
        description: 'Id del topoff por dinero. El id no es único, pueden existir múltiples topoffs con el mismo id pero diferente id-person-reservation. La llave completa para identificar un topoff es la tupla (id-reservation, id-person-reservation, id)'
        type: integer
        format: int64
      id-reservation:
        description: 'Id de la reserva correspondiente. Corresponde al campo id de la reserva'
        type: integer
        format: int64
      id-person-reservation:
        description: 'Id de la reserva de persona correspondiente. Corresponde al campo id de la reserva de persona'
        type: integer
        format: int64
      transaction-number:
        description: 'Número de transacción asociado al pago del topoff'
        type: string
      topoff-time:
        description: 'Fecha y hora del topoff'
        type: string
        format: '["YYYYmmddHHMMSS", "BBBB dd, YYYY at hh:MMpp"]'
      currency:
        description: 'Nombre de la moneda asociada al topoff'
        type: string
        default: 'COP'
      money:
        description: 'Cantidad de dinero incluido en el topoff'
        type: number
        format: double
      username:
        description: 'Nombre del usuario que creo la entidad. Solo se incluye si se consulta a través del endpoint `/clients/{id_cliente}/reservations/` y se envía el parámetro `include-children` en `true`'
        type: string
        
  ListaTopoffsPorDinero:
    type: object
    required:
      - topoffs
    properties:
      topoffs:
        description: 'Lista de topoffs a registrar, puede ser vacía'
        type: array
        items:
          $ref: '#/definitions/TopoffPorDinero'
        
  AccesoPersona:
    type: object
    description: 'El campo `username` solo se incluye si se consulta a través del endpoint `/clients/{id_cliente}/reservations/` y se envía el parámetro `include-children` en `true`'
    required:
      - access-time
      - id-reservation
      - id-person-reservation
    properties:
      id:
        description: 'Id del acceso. El id no es único, pueden existir múltiples accesos con el mismo id pero diferente id-person-reservation. La llave completa para identificar un acceso es la tupla (id-reservation, id-person-reservation, id)'
        type: integer
        format: int64
      id-reservation:
        description: 'Id de la reserva correspondiente. Corresponde al campo id de la reserva'
        type: integer
        format: int64
      id-person-reservation:
        description: 'Id de la reserva de persona correspondiente. Corresponde al campo id de la reserva de persona'
        type: integer
        format: int64
      id-location:
        description: 'Id de la ubicación donde se hizo el acceso. Corresponde al campo id de la ubicación. No se debe enviar dentro de la lista de accesos'
        type: integer
        format: int64
      amount-consumed:
        description: 'Número de accesos consumidos. Este campo no se debe enviar, siempre tiene el valor de 1'
        type: integer
        format: int32
        default: 1
      access-time:
        description: 'Fecha y hora del acceso'
        type: string
        format: '["YYYYmmddHHMMSS", "BBBB dd, YYYY at hh:MMpp"]'
      username:
        description: 'Nombre del usuario que creo la entidad. Solo se incluye si se consulta a través del endpoint `/clients/{id_cliente}/reservations/` y se envía el parámetro `include-children` en `true`'
        type: string
        
  ListaAccesosPersona:
    type: object
    required:
      - id-location
      - accesses
    properties:
      id-location:
        description: 'Id de la ubicación donde se hicieron los accesos. Corresponde al campo id de la ubicación'
        type: integer
        format: int64
      accesses:
        description: 'Lista de accesos a registrar, puede ser vacía'
        type: array
        items:
          $ref: '#/definitions/AccesoPersona'
        
  ConsumoCantidadPersona:
    type: object
    description: 'El campo `username` solo se incluye si se consulta a través del endpoint `/clients/{id_cliente}/reservations/` y se envía el parámetro `include-children` en `true`'
    required:
      - id-sku
      - amount-consumed
      - missing-amount
    properties:
      id:
        description: 'Id del consumo por cantidad. El id no es único, pueden existir múltiples consumos con el mismo id pero diferente id-order. La llave completa para identificar un consumo es la tupla (id-reservation, id-person-reservation, id-order, id)'
        type: integer
        format: int64
      id-reservation:
        description: 'Id de la reserva correspondiente. Corresponde al campo id de la reserva'
        type: integer
        format: int64
      id-person-reservation:
        description: 'Id de la reserva de persona correspondiente. Corresponde al campo id de la reserva de persona'
        type: integer
        format: int64
      id-order:
        description: 'Id de la orden correspondiente. Corresponde al campo id de la orden por cantidad'
        type: integer
        format: int64
      id-location:
        description: 'Id de la ubicación donde se hizo el consumo. Corresponde al campo id de la ubicación'
        type: integer
        format: int64
      id-sku:
        description: 'Id del SKU consumido. Corresponde al campo id del SKU'
        type: integer
        format: int64
      amount-consumed:
        description: 'Número de SKUs consumidos'
        type: integer
        format: int32
      missing-amount:
        description: 'Número de items consumidos que no estaban incluidos en los fondos disponibles. Se espera un número mayor o igual a 0'
        type: integer
        format: int32
      consumption-time:
        description: 'Fecha y hora del consumo. Se usa la fecha de la orden correspondiente'
        type: string
        format: '["YYYYmmddHHMMSS", "BBBB dd, YYYY at hh:MMpp"]'
      username:
        description: 'Nombre del usuario que creo la entidad. Solo se incluye si se consulta a través del endpoint `/clients/{id_cliente}/reservations/` y se envía el parámetro `include-children` en `true`'
        type: string
        
  ConsumoDineroPersona:
    type: object
    description: 'El campo `username` solo se incluye si se consulta a través del endpoint `/clients/{id_cliente}/reservations/` y se envía el parámetro `include-children` en `true`'
    required:
      - id-sku
      - amount-consumed
      - money-consumed
      - missing-money
    properties:
      id:
        description: 'Id del consumo por dinero. El id no es único, pueden existir múltiples consumos con el mismo id pero diferente id-order. La llave completa para identificar un consumo es la tupla (id-reservation, id-person-reservation, id-order, id)'
        type: integer
        format: int64
      id-reservation:
        description: 'Id de la reserva correspondiente. Corresponde al campo id de la reserva'
        type: integer
        format: int64
      id-person-reservation:
        description: 'Id de la reserva de persona correspondiente. Corresponde al campo id de la reserva de persona'
        type: integer
        format: int64
      id-order:
        description: 'Id de la orden correspondiente. Corresponde al campo id de la orden por cantidad'
        type: integer
        format: int64
      id-location:
        description: 'Id de la ubicación donde se hizo el consumo. Corresponde al campo id de la ubicación'
        type: integer
        format: int64
      id-sku:
        description: 'Id del SKU consumido. Corresponde al campo id del SKU'
        type: integer
        format: int64
      amount-consumed:
        description: 'Número de SKUs consumidos'
        type: integer
        format: int32
      money-consumed:
        description: 'Dinero total consumido para el SKU'
        type: number
        format: double
      consumption-time:
        description: 'Fecha y hora del consumo. Se usa la fecha de la orden correspondiente'
        type: string
        format: '["YYYYmmddHHMMSS", "BBBB dd, YYYY at hh:MMpp"]'
      missing-money:
        description: 'Cantidad de dinero consumido que no estaba incluido en los fondos disponibles. Se espera un número mayor o igual a 0'
        type: number
        format: double
      username:
        description: 'Nombre del usuario que creo la entidad. Solo se incluye si se consulta a través del endpoint `/clients/{id_cliente}/reservations/` y se envía el parámetro `include-children` en `true`'
        type: string
        
  OrdenPersona:
    type: object
    description: 'Los campos `person-amount-consumptions`, `person-money-consumptions` y `username` solo se incluyen si se consulta a través del endpoint `/clients/{id_cliente}/reservations/` y se envía el parámetro `include-children` en `true`'
    required:
      - id-reservation
      - id-person-reservation
      - order-time
      - amount-consumptions
      - money-consumptions
    properties:
      id:
        description: 'Id de la orden por cantidad. El id no es único, pueden existir múltiples consumos con el mismo id pero diferente id-person-reservation. La llave completa para identificar una orden es la tupla (id-reservation, id-person-reservation, id)'
        type: integer
        format: int64
      id-reservation:
        description: 'Id de la reserva correspondiente. Corresponde al campo id de la reserva'
        type: integer
        format: int64
      id-person-reservation:
        description: 'Id de la reserva de persona correspondiente. Corresponde al campo id de la reserva de persona'
        type: integer
        format: int64
      id-location:
        description: 'Id de la ubicación donde se hizo el consumo. Corresponde al campo id de la ubicación'
        type: integer
        format: int64
      order-time:
        description: 'Fecha y hora de la orden'
        type: string
        format: '["YYYYmmddHHMMSS", "BBBB dd, YYYY at hh:MMpp"]'
      amount-consumptions:
        description: 'Lista de consumos por cantidad a registrar, puede ser vacía. Este campo no se incluye nunca en la respuesta del servidor, solo se usa para crear la orden. No confundir con `person-amount-consumptions` que se incluye al consultar las reservas completas'
        type: array
        items:
          $ref: '#/definitions/ConsumoCantidadPersona'
      money-consumptions:
        description: 'Lista de consumos por dinero a registrar, puede ser vacía. Este campo no se incluye nunca en la respuesta del servidor, solo se usa para crear la orden. No confundir con `person-money-consumptions` que se incluye al consultar las reservas completas'
        type: array
        items:
          $ref: '#/definitions/ConsumoDineroPersona'
      person-amount-consumptions:
        description: 'Lista de consumos por cantidad hijos de la reserva persona. Solo se incluye si se consulta a través del endpoint `/clients/{id_cliente}/reservations/` y se envía el parámetro `include-children` en `true`. No confundir con `amount-consumptions` que se usa para crear las ordenes'
        type: array
        items:
          $ref: '#/definitions/ConsumoCantidadPersona'
      person-money-consumptions:
        description: 'Lista de consumos por dinero hijos de la reserva persona. Solo se incluye si se consulta a través del endpoint `/clients/{id_cliente}/reservations/` y se envía el parámetro `include-children` en `true`. No confundir con `money-consumptions` que se usa para crear las ordenes'
        type: array
        items:
          $ref: '#/definitions/ConsumoCantidadPersona'
      currency:
        description: 'Nombre de la moneda usada en el consumo'
        type: string
        default: 'COP'
      username:
        description: 'Nombre del usuario que creo la entidad. Solo se incluye si se consulta a través del endpoint `/clients/{id_cliente}/reservations/` y se envía el parámetro `include-children` en `true`'
        type: string
        
  ListaOrdenesPersona:
    type: object
    required:
      - orders
    properties:
      id-location:
        description: 'Id de la ubicación donde se hicieron las ordenes. Corresponde al campo id de la ubicación'
        type: integer
        format: int64
      orders:
        description: 'Lista de ordenes a registrar, puede ser vacía'
        type: array
        items:
          $ref: '#/definitions/OrdenPersona'
        
  ResumenConsumosPorSku:
    type: object
    properties:
      id-sku:
        description: 'Id del SKU asociado al resumen'
        type: integer
        format: int64
      amount-consumed-with-amount:
        description: 'Cantidad de items del SKU correspondiente que se consumieron usando la cantidad incluida en el paquete o en un topoff'
        type: integer
        format: int64
      amount-consumed-with-money:
        description: 'Cantidad de items del SKU correspondiente que se consumieron usando alguna moneda'
        type: integer
        format: int64
      total-amount-consumed:
        description: 'Cantidad de items del SKU correspondiente que se consumieron en total. Corresponde a la suma de los campos `amount-consumed-with-amount` y `amount-consumed-with-money`'
        type: integer
        format: int64
      total-by-currency:
        description: 'Totales para cada una de las monedas que se hayan usado para consumir el SKU dado'
        type: array
        items:
          $ref: '#/definitions/ConsumidoPorDinero'
        
  ConsumidoPorDinero:
    type: object
    properties:
      currency:
        description: 'Nombre de la moneda correspondiente'
        type: string
      money-consumed:
        description: 'Total de dinero consumido usando la moneda con nombre `currency`'
        type: number
        format: double
      amount-consumed:
        description: 'Total de items consumidos usando la moneda con nombre `currency`'
        type: number
        format: double
       
  Error:
    type: object
    required:
      - message
    properties:
      message:
        description: 'Mensaje de error'
        type: string
      internal-code:
        description: 'Código de error interno'
        type: integer
        format: int64
        
parameters:
  id_tag_soportado:
    name: id_tag_soportado
    description: 'Id del tag soportado correspondiente'
    type: integer
    format: int64
    in: path
    required: true
  id_sensor:
    name: id_sensor
    description: 'Id del sensor correspondiente'
    type: integer
    format: int64
    in: path
    required: true
  id_tag_cliente:
    name: id_tag_cliente
    description: 'Id del tag de cliente correspondiente'
    type: integer
    format: int64
    in: path
    required: true
  id_cliente:
    name: id_cliente
    description: 'Id del cliente correspondiente'
    type: integer
    format: int64
    in: path
    required: true
  id_ubicación:
    name: id_ubicación
    description: 'Id de la ubicación correspondiente'
    type: integer
    format: int64
    in: path
    required: true
  id_moneda:
    name: id_moneda
    description: 'Id de la moneda correspondiente'
    type: integer
    format: int64
    in: path
    required: true
  id_categoría_sku:
    name: id_categoría_sku
    description: 'Id de la categoría sku correspondiente'
    type: integer
    format: int64
    in: path
    required: true
  id_sku:
    name: id_sku
    description: 'Id del sku correspondiente'
    type: integer
    format: int64
    in: path
    required: true
  id_persona:
    name: id_persona
    description: 'Id de la persona correspondiente'
    type: integer
    format: int64
    in: path
    required: true
  id_persona_relacionada:
    name: id_persona_relacionada
    description: 'Id de la persona relacionada'
    type: integer
    format: int64
    in: path
    required: true
  id_evento_social:
    name: id_evento_social
    description: 'Id del evento social correspondiente'
    type: integer
    format: int64
    in: path
    required: true
  id_paquete:
    name: id_paquete
    description: 'Id del paquete correspondiente'
    type: integer
    format: int64
    in: path
    required: true
  id_regla_precio_paquete:
    name: id_regla_precio_paquete
    description: 'Id de la regla de precio del paquete correspondiente'
    type: integer
    format: int64
    in: path
    required: true
  id_acceso_paquete:
    name: id_acceso_paquete
    description: 'Id del acceso del paquete correspondiente'
    type: integer
    format: int64
    in: path
    required: true
  id_consumo_cantidad_paquete:
    name: id_consumo_cantidad_paquete
    description: 'Id del consumo por cantidad del paquete correspondiente'
    type: integer
    format: int64
    in: path
    required: true
  id_consumo_dinero_paquete:
    name: id_consumo_dinero_paquete
    description: 'Id del consumo por dinero del paquete correspondiente'
    type: integer
    format: int64
    in: path
    required: true
  id_reserva:
    name: id_reserva
    description: 'Id de la reserva correspondiente'
    type: integer
    format: int64
    in: path
    required: true
  id_reserva_persona:
    name: id_reserva_persona
    description: 'Id de la reserva de persona correspondiente'
    type: integer
    format: int64
    in: path
    required: true
  id_topoff_acceso:
    name: id_topoff_acceso
    description: 'Id del topoff de acceso correspondiente'
    type: integer
    format: int64
    in: path
    required: true
  id_topoff_cantidad:
    name: id_topoff_cantidad
    description: 'Id del topoff por cantidad correspondiente'
    type: integer
    format: int64
    in: path
    required: true
  id_topoff_dinero:
    name: id_topoff_dinero
    description: 'Id del topoff por dinero correspondiente'
    type: integer
    format: int64
    in: path
    required: true
  id_acceso_persona:
    name: id_acceso_persona
    description: 'Id del acceso de persona correspondiente'
    type: integer
    format: int64
    in: path
    required: true
  id_orden_persona:
    name: id_orden_persona
    description: 'Id de la orden de persona correspondiente'
    type: integer
    format: int64
    in: path
    required: true
  username:
    name: username
    description: 'Nombre de usuario correspondiente'
    type: string
    in: path
    required: true
  document-type:
    name: document-type
    description: 'Tipo de documento de la persona'
    type: string
    enum:
      - 'CC'
      - 'NIT'
      - 'TI'
      - 'CE'
      - 'PA'
      - 'RC'
      - 'NUIP'
      - 'CD'
    in: query
    required: true
  document-number:
    name: document-number
    description: 'Número de documento de la persona'
    type: string
    in: query
    required: true
  reservation-number:
    name: reservation-number
    description: 'Número de reserva'
    type: string
    in: query
    required: true
  type:
    name: type
    description: 'Tipo de ubicaciones a consultar'
    type: string
    in: query
    required: false
  nombre_campo:
    name: nombre_campo
    description: 'Nombre del campo correspondiente'
    type: string
    in: path
    required: true
  url_imagen:
    name: url_imagen
    description: 'URL para cargar una imagen'
    type: string
    in: path
    required: true
  initial-time:
    name: initial-time
    description: 'Tiempo inicial de la consulta'
    type: string
    format: '["YYYYmmddHHMMSS", "BBBB dd, YYYY at hh:MMpp"]'
    in: query
    required: false
  final-time:
    name: final-time
    description: 'Tiempo final de la consulta'
    type: string
    format: '["YYYYmmddHHMMSS", "BBBB dd, YYYY at hh:MMpp"]'
    in: query
    required: false
  kind:
    name: kind
    description: 'Tipo de entidad a consultar'
    type: string
    enum:
      - 'reservations'
      - 'persons-reservations'
      - 'money-topoffs'
      - 'amount-topoffs'
      - 'access-topoffs'
      - 'person-accesses'
      - 'person-orders'
      - 'person-amount-consumptions'
      - 'person-money-consumptions'
    in: query
    required: true
  include-deleted:
    name: include-deleted
    description: 'Indica si se deben incluir las entidades que han sido eliminadas en el reporte'
    type: boolean
    in: query
    required: false
  include-children:
    name: include-children
    description: 'Indica si se deben incluir las entidades hijas de la reserva y los usuarios que crearon cada entidad'
    type: boolean
    in: query
    required: false
  base-time:
    name: base-time
    description: 'Tiempo que se debe incluir en los resultados de la consulta'
    type: string
    format: '["YYYYmmddHHMMSS", "BBBB dd, YYYY at hh:MMpp"]'
    in: query
    required: false
  