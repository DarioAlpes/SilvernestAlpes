buildscript {
    ext.kotlin_version = '1.3.11'
    repositories {
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.4'
    }
}

apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'application'
apply plugin: 'idea'
apply plugin: 'com.github.johnrengelman.shadow'

group = 'co.smartobjects'
version = '0.1.0'

def descripcion = "prompter-backend"
description = descripcion
mainClassName = 'co.smartobjects.prompterbackend.PrompterBackend'

sourceCompatibility = 1.8
targetCompatibility = 1.8
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

compileJava {
    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'
}

compileTestJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    options.compilerArgs += '-parameters'
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

repositories {
    maven { url "http://repo.maven.apache.org/maven2" }
    mavenCentral()
    jcenter()
    maven { url "https://www.jitpack.io" }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"

    implementation project(':entidades')
    implementation project(':red')
    implementation project(':persistencia')
    implementation project(':configuracion-persistencia-postgresql')
    implementation project(':configuracion-persistencia-h2')
    implementation project(':integraciones')

    def versionJersey = '2.27'
    implementation "org.glassfish.jersey.inject:jersey-hk2:$versionJersey"
    implementation "org.glassfish.jersey.containers:jersey-container-grizzly2-http:$versionJersey"
    implementation "org.glassfish.jersey.containers:jersey-container-grizzly2-servlet:$versionJersey"
    implementation "org.glassfish.jersey.test-framework.providers:jersey-test-framework-provider-grizzly2:$versionJersey"

    def versionShiroJersey = '0.2.0'
    implementation "org.secnod.shiro:shiro-jersey:$versionShiroJersey"
    implementation 'commons-logging:commons-logging:1.2'
    implementation 'org.crazycake:shiro-redis:3.1.0'

    def versionMetrics = '3.2.3'
    implementation "io.dropwizard.metrics:metrics-core:$versionMetrics"

    def versionJackson = '2.9.7'
    implementation "com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:$versionJackson"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jaxrs:$versionJackson"
    implementation "com.fasterxml.jackson.module:jackson-module-afterburner:$versionJackson"

    implementation 'com.squareup:kotlinpoet:0.7.0'


    def junit5_jupiter = '5.3.1'
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junit5_jupiter"
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junit5_jupiter"
    testImplementation "org.junit.jupiter:junit-jupiter-params:$junit5_jupiter"

    testImplementation 'org.junit.platform:junit-platform-launcher:1.2.0'

    testImplementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
    testImplementation 'org.mockito:mockito-inline:2.19.0'
}

test {
    useJUnitPlatform()

    filter {
        includeTestsMatching('*Pruebas')
    }

    // Always run tests, even when nothing changed.
    dependsOn 'cleanTest'

    // Show test results.
    testLogging {
        events "passed", "skipped", "failed"
    }

    reports {
        junitXml.enabled = false
        html.enabled = false
    }
}

shadowJar {
    baseName = "$descripcion-$version"
    classifier = null
    version = null
}

jar {
    manifest {
        attributes "Main-Class": "$mainClassName"
    }
}